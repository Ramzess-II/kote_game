
kote_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080023f0  080023f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080023f0  080023f0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080023f0  080023f0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023f0  080023f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080023f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000008  08002400  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002400  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002174  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a27  00000000  00000000  000221a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00022bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011680  00000000  00000000  00022fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dd9  00000000  00000000  00034628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059904  00000000  00000000  00037401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00090d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000081c  00000000  00000000  00090d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	080023d8 	.word	0x080023d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	080023d8 	.word	0x080023d8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <unlook_flash>:
#define PAGE_ADR                   ((uint32_t)0x08007C00) // адрес страницы для записи
#define SIZE_DATA_FLASH            3                      // сколько переменных считать из памяти

struct _flash flash;

void unlook_flash (void) {               // последовательность для разблокировки памяти
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY1;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <unlook_flash+0x18>)
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <unlook_flash+0x1c>)
 8000748:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 800074a:	4b03      	ldr	r3, [pc, #12]	; (8000758 <unlook_flash+0x18>)
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <unlook_flash+0x20>)
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40022000 	.word	0x40022000
 800075c:	45670123 	.word	0x45670123
 8000760:	cdef89ab 	.word	0xcdef89ab

08000764 <erase_flash>:
// he
void erase_flash (void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	unlook_flash ();
 8000768:	f7ff ffea 	bl	8000740 <unlook_flash>
	SET_BIT(FLASH->CR, FLASH_CR_PER);     // установим бит стирания
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <erase_flash+0x5c>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <erase_flash+0x5c>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6113      	str	r3, [r2, #16]
	FLASH->AR = PAGE_ADR;                 // запишем страницу для стирания
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <erase_flash+0x5c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <erase_flash+0x60>)
 800077c:	615a      	str	r2, [r3, #20]
	SET_BIT(FLASH->CR, FLASH_CR_STRT);    // запустим стирание
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <erase_flash+0x5c>)
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <erase_flash+0x5c>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6113      	str	r3, [r2, #16]
	while (!(FLASH->SR & FLASH_SR_EOP));  //Дождемся поднятия флага о готовности
 800078a:	bf00      	nop
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <erase_flash+0x5c>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <erase_flash+0x28>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);   // сбросим бит стирания
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <erase_flash+0x5c>)
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <erase_flash+0x5c>)
 800079e:	f023 0302 	bic.w	r3, r3, #2
 80007a2:	6113      	str	r3, [r2, #16]
	FLASH->SR |= FLASH_SR_EOP;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <erase_flash+0x5c>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <erase_flash+0x5c>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	60d3      	str	r3, [r2, #12]
	SET_BIT(FLASH->CR, FLASH_CR_LOCK);    // заблокируем память
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <erase_flash+0x5c>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	4a02      	ldr	r2, [pc, #8]	; (80007c0 <erase_flash+0x5c>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ba:	6113      	str	r3, [r2, #16]
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40022000 	.word	0x40022000
 80007c4:	08007c00 	.word	0x08007c00

080007c8 <devide_32_to_16>:

void devide_32_to_16 (int16_t* adr_flash, int32_t *data) {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	*adr_flash =  (int16_t) *data & 0xFFFF;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	801a      	strh	r2, [r3, #0]
    adr_flash ++;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3302      	adds	r3, #2
 80007e0:	607b      	str	r3, [r7, #4]
    *adr_flash = (int16_t) (*data >> 16) & 0xFFFF;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	141b      	asrs	r3, r3, #16
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	801a      	strh	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <write_flash>:

void write_flash (void) {                // запись в флешу
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
	int32_t* point_data = &flash.gyrX_zero;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <write_flash+0x78>)
 8000800:	607b      	str	r3, [r7, #4]
	erase_flash ();
 8000802:	f7ff ffaf 	bl	8000764 <erase_flash>
	unlook_flash ();
 8000806:	f7ff ff9b 	bl	8000740 <unlook_flash>
	SET_BIT(FLASH->CR, FLASH_CR_PG);     // установим бит записи
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <write_flash+0x7c>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <write_flash+0x7c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6113      	str	r3, [r2, #16]
    int16_t* adr_flash1 = (int16_t*) PAGE_ADR;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <write_flash+0x80>)
 8000818:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SIZE_DATA_FLASH; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e00d      	b.n	800083c <write_flash+0x44>
		devide_32_to_16 (adr_flash1, point_data + i);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	4619      	mov	r1, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff ffcc 	bl	80007c8 <devide_32_to_16>
		adr_flash1 += 2;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3304      	adds	r3, #4
 8000834:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SIZE_DATA_FLASH; i++){
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b02      	cmp	r3, #2
 8000840:	ddee      	ble.n	8000820 <write_flash+0x28>
	}
    while (!(FLASH->SR & FLASH_SR_EOP));  //Дождемся поднятия флага о готовности
 8000842:	bf00      	nop
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <write_flash+0x7c>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <write_flash+0x4c>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);    // сбросим бит записи
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <write_flash+0x7c>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <write_flash+0x7c>)
 8000856:	f023 0301 	bic.w	r3, r3, #1
 800085a:	6113      	str	r3, [r2, #16]
	SET_BIT(FLASH->CR, FLASH_CR_LOCK);    // заблокируем память
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <write_flash+0x7c>)
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <write_flash+0x7c>)
 8000862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000866:	6113      	str	r3, [r2, #16]
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000024 	.word	0x20000024
 8000874:	40022000 	.word	0x40022000
 8000878:	08007c00 	.word	0x08007c00

0800087c <read_from_flash>:

void read_from_flash (void){                     // считать данные из флеша
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	flash.gyrX_zero = *((uint32_t*) PAGE_ADR);
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <read_from_flash+0x5c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <read_from_flash+0x60>)
 8000888:	601a      	str	r2, [r3, #0]
	flash.gyrY_zero = *((uint32_t*) PAGE_ADR + 1);
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <read_from_flash+0x64>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <read_from_flash+0x60>)
 8000892:	605a      	str	r2, [r3, #4]
	flash.gyrZ_zero = *((uint32_t*) PAGE_ADR + 2);
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <read_from_flash+0x68>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <read_from_flash+0x60>)
 800089c:	609a      	str	r2, [r3, #8]
	if (flash.gyrX_zero == 0xFFFFFFFF) flash.gyrX_zero = 0;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <read_from_flash+0x60>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a6:	d102      	bne.n	80008ae <read_from_flash+0x32>
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <read_from_flash+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	if (flash.gyrY_zero == 0xFFFFFFFF) flash.gyrY_zero = 0;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <read_from_flash+0x60>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b6:	d102      	bne.n	80008be <read_from_flash+0x42>
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <read_from_flash+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
	if (flash.gyrZ_zero == 0xFFFFFFFF) flash.gyrZ_zero = 0;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <read_from_flash+0x60>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c6:	d102      	bne.n	80008ce <read_from_flash+0x52>
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <read_from_flash+0x60>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	08007c00 	.word	0x08007c00
 80008dc:	20000024 	.word	0x20000024
 80008e0:	08007c04 	.word	0x08007c04
 80008e4:	08007c08 	.word	0x08007c08

080008e8 <write_to_struct>:

void write_to_struct (uint32_t X, uint32_t Y, uint32_t Z) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	flash.gyrX_zero = X;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4a06      	ldr	r2, [pc, #24]	; (8000910 <write_to_struct+0x28>)
 80008f8:	6013      	str	r3, [r2, #0]
	flash.gyrY_zero = Y;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <write_to_struct+0x28>)
 80008fe:	6053      	str	r3, [r2, #4]
	flash.gyrZ_zero = Z;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a03      	ldr	r2, [pc, #12]	; (8000910 <write_to_struct+0x28>)
 8000904:	6093      	str	r3, [r2, #8]
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000024 	.word	0x20000024

08000914 <CMSIS_I2C_Reset>:
#include "main.h"

extern volatile uint32_t Timeout_counter_ms;


void CMSIS_I2C_Reset(void) {
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	SET_BIT(I2C2->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C2->CR1, I2C_CR1_SWRST) == 0) ;
 8000924:	bf00      	nop
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f9      	beq.n	8000926 <CMSIS_I2C_Reset+0x12>
	CLEAR_BIT(I2C2->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 8000938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800093c:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C2->CR1, I2C_CR1_SWRST)) ;
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <CMSIS_I2C_Reset+0x44>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1f9      	bne.n	8000940 <CMSIS_I2C_Reset+0x2c>
	/* Примечание: Этот бит можно использовать для повторной инициализации
	 * периферийного устройства после ошибки или заблокированного состояния.
	 * Например, если бит BUSY установлен и остается заблокированным из-за сбоя на шине,
	 * бит SWRST можно использовать для выхода из этого состояния.*/
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40005800 	.word	0x40005800

0800095c <CMSIS_I2C2_Init>:


void CMSIS_I2C2_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	//Настройки тактирования
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирование порта B
 8000960:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); //Запуск тактирования I2C1
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a2a      	ldr	r2, [pc, #168]	; (8000a28 <CMSIS_I2C2_Init+0xcc>)
 800097e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000982:	61d3      	str	r3, [r2, #28]

	//Настройки ножек SDA и SCL
	//PB11 SDA (I2C Data I/O) Alternate function open drain
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF11_Msk, 0b11 << GPIO_CRH_CNF11_Pos); //Alternate function open drain
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 800098a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098e:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_MODE11_Msk, 0b11 << GPIO_CRH_MODE11_Pos); //Maximum output speed 50 MHz
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 8000996:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800099a:	6053      	str	r3, [r2, #4]
	//PB10 SCL (I2C clock) Alternate function open drain
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF10_Msk, 0b11 << GPIO_CRH_CNF10_Pos); //Alternate function open drain
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 80009a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80009a6:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_MODE10_Msk, 0b11 << GPIO_CRH_MODE10_Pos); //Maximum output speed 50 MHz
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <CMSIS_I2C2_Init+0xd0>)
 80009ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80009b2:	6053      	str	r3, [r2, #4]

	CMSIS_I2C_Reset();
 80009b4:	f7ff ffae 	bl	8000914 <CMSIS_I2C_Reset>

	I2C2->CR1= 0;                            // очистим регистр
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
	I2C2->CR2=(((APB1_Clock/1000000ul)<<I2C_CR2_FREQ_Pos)&I2C_CR2_FREQ_Msk) ;// на какой скорости работает шина I2C2
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <CMSIS_I2C2_Init+0xd8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <CMSIS_I2C2_Init+0xdc>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009d0:	6053      	str	r3, [r2, #4]
	//I2C2->CCR= 0 | ((((SystemCoreClock+1000*I2C_BUS_FREQ_KHZ)/1000/I2C_BUS_FREQ_KHZ/2)<<I2C_CCR_CCR_Pos)&I2C_CCR_CCR_Msk); //скорость шины из даташита ??
	I2C2->CCR =  (APB1_Clock / (I2C_BUS_FREQ_KHZ*1000*3)) ;    //((1/(I2C_BUS_FREQ_KHZ*1000))*3/(1/SystemCoreClock));
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <CMSIS_I2C2_Init+0xd8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009d8:	4918      	ldr	r1, [pc, #96]	; (8000a3c <CMSIS_I2C2_Init+0xe0>)
 80009da:	fba1 1303 	umull	r1, r3, r1, r3
 80009de:	0cdb      	lsrs	r3, r3, #19
 80009e0:	61d3      	str	r3, [r2, #28]
	SET_BIT(I2C2->CCR, I2C_CCR_FS);           //Fast mode I2C
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ec:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(I2C2->CCR, I2C_CCR_DUTY);       //Fm mode tlow/thigh = 2
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 80009f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009f8:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C2->CCR, I2C_CCR_DUTY);       //Fm mode tlow/thigh = 16/9 (see CCR)
	I2C2->TRISE=APB1_Clock/3333333ul+1;       //1000000 или 3333333 это скорость нарастания от частоты  1000нс для стандарт, 300нс для фаст (такие цифры потому что
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <CMSIS_I2C2_Init+0xd8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <CMSIS_I2C2_Init+0xe4>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0d5b      	lsrs	r3, r3, #21
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 8000a08:	3301      	adds	r3, #1
 8000a0a:	6213      	str	r3, [r2, #32]
	I2C2->OAR1=0 ;                            // 300нс это частота 3333333Гц, а 1000нс это 1000000Гц)
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
	I2C2->OAR2= 0;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
	SET_BIT(I2C2->CR1, I2C_CR1_PE);          // включим I2C2
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <CMSIS_I2C2_Init+0xd4>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]

	//п.п. 26.6.9 I2C TRISE register (I2C_TRISE)(стр. 782)
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 37 << I2C_TRISE_TRISE_Pos); //для Sm mode
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 12 << I2C_TRISE_TRISE_Pos); //для Fm mode

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40005800 	.word	0x40005800
 8000a34:	20000004 	.word	0x20000004
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	6fd91d85 	.word	0x6fd91d85
 8000a40:	a10fb0af 	.word	0xa10fb0af

08000a44 <CMSIS_I2C_MemWrite>:
 *  @param  *data - Данные, которые будем записывать
 *  @param  Size_data - Размер, сколько байт будем записывать.
 *  @retval  Возвращает статус записи. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
uint8_t CMSIS_I2C_MemWrite(I2C_TypeDef *I2C, uint8_t Adress_Device, uint16_t Adress_data, uint8_t Size_adress, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4603      	mov	r3, r0
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	460b      	mov	r3, r1
 8000a58:	803b      	strh	r3, [r7, #0]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	70bb      	strb	r3, [r7, #2]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d02d      	beq.n	8000ac6 <CMSIS_I2C_MemWrite+0x82>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR10)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR11))) {
 8000a6a:	4b70      	ldr	r3, [pc, #448]	; (8000c2c <CMSIS_I2C_MemWrite+0x1e8>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d009      	beq.n	8000a8a <CMSIS_I2C_MemWrite+0x46>
 8000a76:	4b6d      	ldr	r3, [pc, #436]	; (8000c2c <CMSIS_I2C_MemWrite+0x1e8>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <CMSIS_I2C_MemWrite+0x46>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8000a82:	f7ff ff47 	bl	8000914 <CMSIS_I2C_Reset>
			CMSIS_I2C2_Init(); //повторная инициализация
 8000a86:	f7ff ff69 	bl	800095c <CMSIS_I2C2_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <CMSIS_I2C_MemWrite+0x5e>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d00b      	beq.n	8000ac2 <CMSIS_I2C_MemWrite+0x7e>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f023 0201 	bic.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f043 0201 	orr.w	r2, r3, #1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
		}

		return false;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e0ae      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре. ??
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8000ade:	4a54      	ldr	r2, [pc, #336]	; (8000c30 <CMSIS_I2C_MemWrite+0x1ec>)
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000ae4:	e005      	b.n	8000af2 <CMSIS_I2C_MemWrite+0xae>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8000ae6:	4b52      	ldr	r3, [pc, #328]	; (8000c30 <CMSIS_I2C_MemWrite+0x1ec>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <CMSIS_I2C_MemWrite+0xae>
			return false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e098      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f3      	beq.n	8000ae6 <CMSIS_I2C_MemWrite+0xa2>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + Write
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <CMSIS_I2C_MemWrite+0x1ec>)
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000b12:	e005      	b.n	8000b20 <CMSIS_I2C_MemWrite+0xdc>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8000b14:	4b46      	ldr	r3, [pc, #280]	; (8000c30 <CMSIS_I2C_MemWrite+0x1ec>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <CMSIS_I2C_MemWrite+0xdc>
			return false;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e081      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <CMSIS_I2C_MemWrite+0xf4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0ed      	beq.n	8000b14 <CMSIS_I2C_MemWrite+0xd0>
		}

	}
	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d068      	beq.n	8000c16 <CMSIS_I2C_MemWrite+0x1d2>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]

		/*Отправим адрес памяти*/
		for (uint16_t i = 0; i < Size_adress; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	81fb      	strh	r3, [r7, #14]
 8000b50:	e028      	b.n	8000ba4 <CMSIS_I2C_MemWrite+0x160>
			I2C->DR = *((uint8_t*)&Adress_data + (Size_adress - 1 - i)); //Запись байта
 8000b52:	78bb      	ldrb	r3, [r7, #2]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000b68:	e013      	b.n	8000b92 <CMSIS_I2C_MemWrite+0x14e>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10d      	bne.n	8000b92 <CMSIS_I2C_MemWrite+0x14e>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	615a      	str	r2, [r3, #20]
					return false;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e048      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0e5      	beq.n	8000b6a <CMSIS_I2C_MemWrite+0x126>
		for (uint16_t i = 0; i < Size_adress; i++) {
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	78bb      	ldrb	r3, [r7, #2]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	89fa      	ldrh	r2, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3d1      	bcc.n	8000b52 <CMSIS_I2C_MemWrite+0x10e>
				}
			}
		}

		/*Будем записывать данные в ячейку памяти, начиная с указанного адреса*/
		for (uint16_t i = 0; i < Size_data; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	81bb      	strh	r3, [r7, #12]
 8000bb2:	e024      	b.n	8000bfe <CMSIS_I2C_MemWrite+0x1ba>
			I2C->DR = *(data + i); //Запись байта
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000bc2:	e013      	b.n	8000bec <CMSIS_I2C_MemWrite+0x1a8>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10d      	bne.n	8000bec <CMSIS_I2C_MemWrite+0x1a8>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	615a      	str	r2, [r3, #20]
					return false;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e01b      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0e5      	beq.n	8000bc4 <CMSIS_I2C_MemWrite+0x180>
		for (uint16_t i = 0; i < Size_data; i++) {
 8000bf8:	89bb      	ldrh	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	81bb      	strh	r3, [r7, #12]
 8000bfe:	89ba      	ldrh	r2, [r7, #12]
 8000c00:	8bbb      	ldrh	r3, [r7, #28]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3d6      	bcc.n	8000bb4 <CMSIS_I2C_MemWrite+0x170>
				}
			}
		}

		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]

		return true;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e006      	b.n	8000c24 <CMSIS_I2C_MemWrite+0x1e0>

	} else {
		//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
		//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF

		return false;
 8000c22:	2300      	movs	r3, #0
	}
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	20000038 	.word	0x20000038

08000c34 <CMSIS_I2C_MemRead>:
 *  @param  *data - Данные, в которые будем записывать считанную информацию.
 *  @param  Size_data - Размер, сколько байт будем считывать.
 *  @retval  Возвращает статус считывания. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
uint8_t CMSIS_I2C_MemRead(I2C_TypeDef *I2C, uint8_t Adress_Device, uint16_t Adress_data, uint8_t Size_adress, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	70fb      	strb	r3, [r7, #3]
 8000c46:	460b      	mov	r3, r1
 8000c48:	803b      	strh	r3, [r7, #0]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	70bb      	strb	r3, [r7, #2]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d02d      	beq.n	8000cb6 <CMSIS_I2C_MemRead+0x82>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR10)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR11))) {
 8000c5a:	4b95      	ldr	r3, [pc, #596]	; (8000eb0 <CMSIS_I2C_MemRead+0x27c>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d009      	beq.n	8000c7a <CMSIS_I2C_MemRead+0x46>
 8000c66:	4b92      	ldr	r3, [pc, #584]	; (8000eb0 <CMSIS_I2C_MemRead+0x27c>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <CMSIS_I2C_MemRead+0x46>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8000c72:	f7ff fe4f 	bl	8000914 <CMSIS_I2C_Reset>
			CMSIS_I2C2_Init(); //повторная инициализация
 8000c76:	f7ff fe71 	bl	800095c <CMSIS_I2C2_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d005      	beq.n	8000c92 <CMSIS_I2C_MemRead+0x5e>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00b      	beq.n	8000cb2 <CMSIS_I2C_MemRead+0x7e>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 0201 	bic.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
		}

		return false;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e107      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8000cce:	4a79      	ldr	r2, [pc, #484]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000cd4:	e005      	b.n	8000ce2 <CMSIS_I2C_MemRead+0xae>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8000cd6:	4b77      	ldr	r3, [pc, #476]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <CMSIS_I2C_MemRead+0xae>
			return false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e0f1      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f3      	beq.n	8000cd6 <CMSIS_I2C_MemRead+0xa2>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + команда Write
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8000cfc:	4a6d      	ldr	r2, [pc, #436]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000d02:	e005      	b.n	8000d10 <CMSIS_I2C_MemRead+0xdc>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8000d04:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <CMSIS_I2C_MemRead+0xdc>
			return false;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e0da      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <CMSIS_I2C_MemRead+0xf4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0ed      	beq.n	8000d04 <CMSIS_I2C_MemRead+0xd0>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80c1 	beq.w	8000eb8 <CMSIS_I2C_MemRead+0x284>
		//Если устройство отозвалось, сбросим бит ADDR
        /*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]

		/*Отправим адрес памяти*/
		for (uint16_t i = 0; i < Size_adress; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	81fb      	strh	r3, [r7, #14]
 8000d42:	e028      	b.n	8000d96 <CMSIS_I2C_MemRead+0x162>
			I2C->DR = *((uint8_t*)&Adress_data + (Size_adress - 1 - i)); //Запись байта
 8000d44:	78bb      	ldrb	r3, [r7, #2]
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000d5a:	e013      	b.n	8000d84 <CMSIS_I2C_MemRead+0x150>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10d      	bne.n	8000d84 <CMSIS_I2C_MemRead+0x150>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	615a      	str	r2, [r3, #20]
					return false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e0a0      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0e5      	beq.n	8000d5c <CMSIS_I2C_MemRead+0x128>
		for (uint16_t i = 0; i < Size_adress; i++) {
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	3301      	adds	r3, #1
 8000d94:	81fb      	strh	r3, [r7, #14]
 8000d96:	78bb      	ldrb	r3, [r7, #2]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	89fa      	ldrh	r2, [r7, #14]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3d1      	bcc.n	8000d44 <CMSIS_I2C_MemRead+0x110>
				}
			}
		}

		//Повторный старт
		SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]

		Timeout_counter_ms = Timeout_ms;
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	6013      	str	r3, [r2, #0]
		while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000db2:	e005      	b.n	8000dc0 <CMSIS_I2C_MemRead+0x18c>
			//Ожидаем до момента, пока не сработает Start condition generated

			if (!Timeout_counter_ms) {
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <CMSIS_I2C_MemRead+0x18c>
				return false;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e082      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
		while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f3      	beq.n	8000db4 <CMSIS_I2C_MemRead+0x180>
			}

		}
		//ВНИМАНИЕ!
		/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
		I2C->SR1;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
		I2C->DR = (Adress_Device << 1 | 1); //Адрес + команда Read
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]

		Timeout_counter_ms = Timeout_ms;
 8000dde:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	6013      	str	r3, [r2, #0]
		while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000de4:	e005      	b.n	8000df2 <CMSIS_I2C_MemRead+0x1be>
			//Ждем, пока адрес отзовется

			if (!Timeout_counter_ms) {
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <CMSIS_I2C_MemRead+0x280>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <CMSIS_I2C_MemRead+0x1be>
				return false;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e069      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
		while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d105      	bne.n	8000e0a <CMSIS_I2C_MemRead+0x1d6>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0ed      	beq.n	8000de6 <CMSIS_I2C_MemRead+0x1b2>
			}

		}

		if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d043      	beq.n	8000e9e <CMSIS_I2C_MemRead+0x26a>
			//Если устройство отозвалось, сбросим бит ADDR
			/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
			I2C->SR1;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
			I2C->SR2;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]

			/*Прочтем данные, начиная с указанного адреса*/
			for (uint16_t i = 0; i < Size_data; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	81bb      	strh	r3, [r7, #12]
 8000e22:	e036      	b.n	8000e92 <CMSIS_I2C_MemRead+0x25e>
				if (i < Size_data - 1) {
 8000e24:	89ba      	ldrh	r2, [r7, #12]
 8000e26:	8bbb      	ldrh	r3, [r7, #28]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	da14      	bge.n	8000e58 <CMSIS_I2C_MemRead+0x224>
					SET_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы хотим принять следующий байт, то отправляем ACK
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
					while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) ;
 8000e3a:	bf00      	nop
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f9      	beq.n	8000e3c <CMSIS_I2C_MemRead+0x208>
					*(data + i) = I2C->DR; //Чтение байта
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6919      	ldr	r1, [r3, #16]
 8000e4c:	89bb      	ldrh	r3, [r7, #12]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4413      	add	r3, r2
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e019      	b.n	8000e8c <CMSIS_I2C_MemRead+0x258>
				} else {
					CLEAR_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы знаем, что следующий принятый байт будет последним, то отправим NACK
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]

					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
					while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) ; //Подождем, пока сдвиговый регистр пополнится новым байтом данных
 8000e70:	bf00      	nop
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <CMSIS_I2C_MemRead+0x23e>
					*(data + i) = I2C->DR; //Чтение байта
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6919      	ldr	r1, [r3, #16]
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4413      	add	r3, r2
 8000e88:	b2ca      	uxtb	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
			for (uint16_t i = 0; i < Size_data; i++) {
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	81bb      	strh	r3, [r7, #12]
 8000e92:	89ba      	ldrh	r2, [r7, #12]
 8000e94:	8bbb      	ldrh	r3, [r7, #28]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3c4      	bcc.n	8000e24 <CMSIS_I2C_MemRead+0x1f0>
				}
			} return true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e013      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>

		} else {
			//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
			//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
			return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e00b      	b.n	8000ec6 <CMSIS_I2C_MemRead+0x292>
 8000eae:	bf00      	nop
 8000eb0:	40010c00 	.word	0x40010c00
 8000eb4:	20000038 	.word	0x20000038
		}

	} else {
		//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
		//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
		return false;
 8000ec4:	2300      	movs	r3, #0
	}
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	; (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <CMSIS_RCC_SystemClock_72MHz>:
 *  В настройке также необходимо настроить FLASH на работу, совместимую с 72MHz:
 *  Reference Manual/см. п.3.2 Memory organization (стр. 49)
 ***************************************************************************************
 */

void CMSIS_RCC_SystemClock_72MHz(void) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSION); //Запустим внутренний RC генератор на 8 МГц
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0); //Дождемся поднятия флага о готовности
 8000f6c:	bf00      	nop
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f9      	beq.n	8000f6e <CMSIS_RCC_SystemClock_72MHz+0x12>

	SET_BIT(RCC->CR, RCC_CR_HSEON); //Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0); //Дождемся поднятия флага о готовности
 8000f86:	bf00      	nop
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f9      	beq.n	8000f88 <CMSIS_RCC_SystemClock_72MHz+0x2c>

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSE); //Выберем HSE в качестве System Clock(PLL лучше пока не выбирать, он у нас отключен)
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 0303 	bic.w	r3, r3, #3
 8000f9c:	4a2b      	ldr	r2, [pc, #172]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6053      	str	r3, [r2, #4]
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE); //Prefetch is enabled(В Cube MX включено и я включил...)
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a29      	ldr	r2, [pc, #164]	; (8001050 <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	6013      	str	r3, [r2, #0]
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_1); //010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	4a25      	ldr	r2, [pc, #148]	; (8001050 <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	6013      	str	r3, [r2, #0]

	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1);     //APB Prescaler /1
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fca:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_DIV2);   //APB1 Prescaler /2, т.к. PCLK1 max 36MHz
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_CFGR_PPRE2_DIV1);   //APB2 Prescaler /1. Тут нас ничего не ограничивает. Будет 72MHz.
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fe2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fe6:	6053      	str	r3, [r2, #4]

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE_HSE); //Никакое предделение перед PLL нам не нужно. Поэтому /1.
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	6053      	str	r3, [r2, #4]
	SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);         //В качестве входного сигнала для PLL выберем HSE
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMULL, RCC_CFGR_PLLMULL9); //т.к. кварц у нас 8Mhz, а нам нужно 72MHz, то в PLL нужно сделать умножение на 9. 8MHz * 9 = 72MHz.
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001006:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800100a:	6053      	str	r3, [r2, #4]

	SET_BIT(RCC->CR, RCC_CR_CSSON);                       //Включим CSS
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001016:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR, RCC_CR_PLLON);                       //Запустим PLL
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800101e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001022:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0);        //Дожидемся поднятия флага включения PLL
 8001024:	bf00      	nop
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <CMSIS_RCC_SystemClock_72MHz+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);  //Выберем PLL в качестве System Clock
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6053      	str	r3, [r2, #4]


	//MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, RCC_CFGR_ADCPRE_DIV6); //ADC Prescaler /6, чтоб было 12MHz, т.к. максимальная частота тут 14 MHz
    //CLEAR_BIT(RCC->CFGR, RCC_CFGR_USBPRE); //Для USB 72MHz/1.5 = 48MHz
	//MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, RCC_CFGR_MCO_PLLCLK_DIV2); //В качестве тактирования для MCO выбрал PLL. Будет 36 MHz.
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	40022000 	.word	0x40022000

08001054 <CMSIS_SysTick_Timer_init>:
 *  На этом таймере мы настроим Delay и аналог HAL_GetTick()
 *  PM0056 STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual/
 *  см. п.4.5 SysTick timer (STK) (стр. 150)
 ***************************************************************************************
 */
void CMSIS_SysTick_Timer_init(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	/* п. 4.5.1 SysTick control and status register (STK_CTRL) (стр. 151)*/

	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	6013      	str	r3, [r2, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 72MHz
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk,
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001084:	490a      	ldr	r1, [pc, #40]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <CMSIS_SysTick_Timer_init+0x60>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
			71999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk,
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <CMSIS_SysTick_Timer_init+0x60>)
 8001098:	4313      	orrs	r3, r2
 800109a:	608b      	str	r3, [r1, #8]
			71999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 71999
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <CMSIS_SysTick_Timer_init+0x5c>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e010 	.word	0xe000e010
 80010b4:	0001193f 	.word	0x0001193f

080010b8 <Delay_ms>:
 ******************************************************************************
 *  @breif Delay_ms
 *  @param   uint32_t Milliseconds - Длина задержки в миллисекундах
 ******************************************************************************
 */
void Delay_ms(uint32_t Milliseconds) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <Delay_ms+0x24>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
	while (Delay_counter_ms != 0);
 80010c6:	bf00      	nop
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <Delay_ms+0x24>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1fb      	bne.n	80010c8 <Delay_ms+0x10>
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000034 	.word	0x20000034

080010e0 <SysTick_Handler>:
 ******************************************************************************
 *  @breif Прерывание по флагу COUNTFLAG (см. п. 4.5.1 SysTick control and status register (STK_CTRL))
 *  Список векторов(прерываний) можно найти в файле startup_stm32f103c8tx.S
 ******************************************************************************
 */
void SysTick_Handler(void) {
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <SysTick_Handler+0xbc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <SysTick_Handler+0xbc>)
 80010ec:	6013      	str	r3, [r2, #0]

	if (Delay_counter_ms)       Delay_counter_ms--;      // задеркжка
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <SysTick_Handler+0xc0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <SysTick_Handler+0x20>
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <SysTick_Handler+0xc0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <SysTick_Handler+0xc0>)
 80010fe:	6013      	str	r3, [r2, #0]
	if (Timeout_counter_ms)	    Timeout_counter_ms--;    // максимальное время опроса датчика
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <SysTick_Handler+0xc4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <SysTick_Handler+0x32>
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <SysTick_Handler+0xc4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3b01      	subs	r3, #1
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <SysTick_Handler+0xc4>)
 8001110:	6013      	str	r3, [r2, #0]
	if (time_game )             time_game --;            // время до конца игры
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SysTick_Handler+0xc8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <SysTick_Handler+0x44>
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <SysTick_Handler+0xc8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <SysTick_Handler+0xc8>)
 8001122:	6013      	str	r3, [r2, #0]
	if (time_game == 1)         flag.time_of = true;     // чтоб остановить игру 1 раз, так как если будет 0 останавливать будет каждый раз
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SysTick_Handler+0xc8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d104      	bne.n	8001136 <SysTick_Handler+0x56>
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <SysTick_Handler+0xcc>)
 800112e:	7813      	ldrb	r3, [r2, #0]
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	7013      	strb	r3, [r2, #0]
	if (flag.start_polling)     flag.start_polling --;   // старт опроса, циклично запускать
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <SysTick_Handler+0xcc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <SysTick_Handler+0x80>
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <SysTick_Handler+0xcc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800114c:	b2db      	uxtb	r3, r3
 800114e:	333f      	adds	r3, #63	; 0x3f
 8001150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <SysTick_Handler+0xcc>)
 8001158:	7813      	ldrb	r3, [r2, #0]
 800115a:	f361 0387 	bfi	r3, r1, #2, #6
 800115e:	7013      	strb	r3, [r2, #0]
	if (time_to_next_game)      time_to_next_game --;    // время для паузы между играми
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <SysTick_Handler+0xd0>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <SysTick_Handler+0x94>
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <SysTick_Handler+0xd0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <SysTick_Handler+0xd0>)
 8001172:	801a      	strh	r2, [r3, #0]
	if (provoke)                provoke --;              // провокация)
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <SysTick_Handler+0xd4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <SysTick_Handler+0xaa>
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <SysTick_Handler+0xd4>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <SysTick_Handler+0xd4>)
 8001186:	801a      	strh	r2, [r3, #0]
    		treck_go (flag.sound);
    	}
	}*/


}
 8001188:	e004      	b.n	8001194 <SysTick_Handler+0xb4>
	else flag.mov_provoke       = true;
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <SysTick_Handler+0xcc>)
 800118c:	78d3      	ldrb	r3, [r2, #3]
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	70d3      	strb	r3, [r2, #3]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000030 	.word	0x20000030
 80011a0:	20000034 	.word	0x20000034
 80011a4:	20000038 	.word	0x20000038
 80011a8:	2000003c 	.word	0x2000003c
 80011ac:	2000010c 	.word	0x2000010c
 80011b0:	20000042 	.word	0x20000042
 80011b4:	20000044 	.word	0x20000044

080011b8 <CMSIS_PC13_OUTPUT_Push_Pull_init>:
 *  @breif Инициализация PIN PC13 на выход в режиме Push-Pull с максимальной скоростью 50 MHz
 *  Reference Manual/см. п.9.2 GPIO registers (стр. 171)
 *  Перед настройкой (GPIOs and AFIOs) нужно включить тактирование порта.
 ***************************************************************************************
 */
void CMSIS_PC13_OUTPUT_Push_Pull_init(void) {
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); //Запуск тактирования порта C
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a15      	ldr	r2, [pc, #84]	; (8001224 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_MODE13, 0b11 << GPIO_CRH_MODE13_Pos); //Настройка GPIOC порта 13 на выход со максимальной скоростью в 50 MHz
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 80011da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80011de:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13, 0b00 << GPIO_CRH_CNF13_Pos); //Настройка GPIOC порта 13 на выход в режиме Push-Pull
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 80011e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011ea:	6053      	str	r3, [r2, #4]

	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE1, 0b11 << GPIO_CRL_MODE1_Pos); //Настройка GPIOB порта 1 на выход со максимальной скоростью в 50 MHz
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 80011f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011f6:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF1, 0b00 << GPIO_CRL_CNF1_Pos); //Настройка GPIOB порта 1 на выход в режиме Push-Pull
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 80011fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001202:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE0, 0b11 << GPIO_CRL_MODE0_Pos); //Настройка GPIOB порта 0 на выход со максимальной скоростью в 50 MHz
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a08      	ldr	r2, [pc, #32]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 800120a:	f043 0303 	orr.w	r3, r3, #3
 800120e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF0, 0b00 << GPIO_CRL_CNF0_Pos); //Настройка GPIOB порта 0 на выход в режиме Push-Pull
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001216:	f023 030c 	bic.w	r3, r3, #12
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40011000 	.word	0x40011000
 800122c:	40010c00 	.word	0x40010c00

08001230 <CMSIS_B12_Input_init>:

void CMSIS_B12_Input_init(void) {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <CMSIS_B12_Input_init+0x34>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <CMSIS_B12_Input_init+0x34>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF12, 0b01 << GPIO_CRH_CNF12_Pos); //Настройка GPIOB порта 13 на вход
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <CMSIS_B12_Input_init+0x38>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <CMSIS_B12_Input_init+0x38>)
 800124a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124e:	6053      	str	r3, [r2, #4]
	SET_BIT(GPIOB -> BSRR, GPIO_BSRR_BS12);    // подтяжка к пул ап
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <CMSIS_B12_Input_init+0x38>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <CMSIS_B12_Input_init+0x38>)
 8001256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125a:	6113      	str	r3, [r2, #16]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010c00 	.word	0x40010c00

0800126c <PWM_Out>:

void PWM_Out (void) {                            // настроим ШИМ
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <PWM_Out+0xb0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <PWM_Out+0xb0>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Запуск тактирования порта A
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <PWM_Out+0xb0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <PWM_Out+0xb0>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE8, 0b11 << GPIO_CRH_MODE8_Pos); //Настройка GPIOA порта 8 на выход со максимальной скоростью в 50 MHz
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <PWM_Out+0xb4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <PWM_Out+0xb4>)
 800128e:	f043 0303 	orr.w	r3, r3, #3
 8001292:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF8, 0b10 << GPIO_CRH_CNF8_Pos); //Настройка GPIOA порта 8 на выход в режиме Push-Pull
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <PWM_Out+0xb4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 030c 	bic.w	r3, r3, #12
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <PWM_Out+0xb4>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE9, 0b11 << GPIO_CRH_MODE9_Pos); //Настройка GPIOA порта 9 на выход со максимальной скоростью в 50 MHz
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <PWM_Out+0xb4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <PWM_Out+0xb4>)
 80012aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012ae:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9, 0b10 << GPIO_CRH_CNF9_Pos); //Настройка GPIOA порта 9 на выход в режиме Push-Pull
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <PWM_Out+0xb4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <PWM_Out+0xb4>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE10, 0b11 << GPIO_CRH_MODE10_Pos); //Настройка GPIOA порта 10 на выход со максимальной скоростью в 50 MHz
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <PWM_Out+0xb4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a16      	ldr	r2, [pc, #88]	; (8001320 <PWM_Out+0xb4>)
 80012c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012ca:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10, 0b10 << GPIO_CRH_CNF10_Pos); //Настройка GPIOA порта 10 на выход в режиме Push-Pull
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <PWM_Out+0xb4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <PWM_Out+0xb4>)
 80012d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012da:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE11, 0b11 << GPIO_CRH_MODE11_Pos); //Настройка GPIOA порта 11 на выход со максимальной скоростью в 50 MHz
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <PWM_Out+0xb4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <PWM_Out+0xb4>)
 80012e2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80012e6:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF11, 0b10 << GPIO_CRH_CNF11_Pos); //Настройка GPIOA порта 11 на выход в режиме Push-Pull
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <PWM_Out+0xb4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <PWM_Out+0xb4>)
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE0, 0b11 << GPIO_CRL_MODE0_Pos); //Настройка GPIOA порта 0 на выход со максимальной скоростью в 50 MHz
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <PWM_Out+0xb4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <PWM_Out+0xb4>)
 80012fe:	f043 0303 	orr.w	r3, r3, #3
 8001302:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF0, 0b10 << GPIO_CRL_CNF0_Pos); //Настройка GPIOA порта 0 на выход в режиме Push-Pull
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <PWM_Out+0xb4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 030c 	bic.w	r3, r3, #12
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <PWM_Out+0xb4>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010800 	.word	0x40010800

08001324 <Tim1_init>:

void Tim1_init (void) {
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //Запуск тактирования TIM1
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <Tim1_init+0xb8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <Tim1_init+0xb8>)
 800132e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001332:	6193      	str	r3, [r2, #24]
	TIM1->PSC = 20;    //делитель
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <Tim1_init+0xbc>)
 8001336:	2214      	movs	r2, #20
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1000;  //значение перезагрузки
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <Tim1_init+0xbc>)
 800133c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->BDTR |= TIM_BDTR_MOE;          //разрешим использовать выводы таймера как выходы
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <Tim1_init+0xbc>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <Tim1_init+0xbc>)
 8001348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44

	SET_BIT(TIM1->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);   //PWM mode 1
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <Tim1_init+0xbc>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <Tim1_init+0xbc>)
 8001354:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001358:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM1->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);   //PWM mode 1
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <Tim1_init+0xbc>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <Tim1_init+0xbc>)
 8001360:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001364:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM1->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);   //PWM mode 1
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <Tim1_init+0xbc>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <Tim1_init+0xbc>)
 800136c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001370:	61d3      	str	r3, [r2, #28]
	SET_BIT(TIM1->CCMR2, 0b110 << TIM_CCMR2_OC4M_Pos);   //PWM mode 1
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <Tim1_init+0xbc>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <Tim1_init+0xbc>)
 8001378:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800137c:	61d3      	str	r3, [r2, #28]

	SET_BIT(TIM1->CCER, TIM_CCER_CC1E);  //настроим на выход канал 1
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <Tim1_init+0xbc>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <Tim1_init+0xbc>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC2E);  //настроим на выход канал 2
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <Tim1_init+0xbc>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <Tim1_init+0xbc>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC3E);  //настроим на выход канал 3
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <Tim1_init+0xbc>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <Tim1_init+0xbc>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC4E);  //настроим на выход канал 4
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <Tim1_init+0xbc>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <Tim1_init+0xbc>)
 80013a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ac:	6213      	str	r3, [r2, #32]

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);     //включаем счётчик
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <Tim1_init+0xbc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <Tim1_init+0xbc>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6013      	str	r3, [r2, #0]

	TIM1->CCR1 = 0;  //коэф. заполнения 1
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <Tim1_init+0xbc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;  //коэф. заполнения 2
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <Tim1_init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;  //коэф. заполнения 3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <Tim1_init+0xbc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;  //коэф. заполнения 4
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <Tim1_init+0xbc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40012c00 	.word	0x40012c00

080013e4 <Tim3_init>:

void Tim3_init (void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);     //Запуск тактирования TIM3
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <Tim3_init+0x48>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <Tim3_init+0x48>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = 10;                               //делитель
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <Tim3_init+0x4c>)
 80013f6:	220a      	movs	r2, #10
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000;                              //значение перезагрузки
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <Tim3_init+0x4c>)
 80013fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM3->DIER, TIM_DIER_UIE);             // прерывание по переполнению
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <Tim3_init+0x4c>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <Tim3_init+0x4c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	60d3      	str	r3, [r2, #12]
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);               //включаем счётчик
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <Tim3_init+0x4c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <Tim3_init+0x4c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);                     //Включим прерывания по TIM3
 800141a:	201d      	movs	r0, #29
 800141c:	f7ff fd58 	bl	8000ed0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);                // выставим приоритет
 8001420:	2101      	movs	r1, #1
 8001422:	201d      	movs	r0, #29
 8001424:	f7ff fd70 	bl	8000f08 <__NVIC_SetPriority>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	40000400 	.word	0x40000400

08001434 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM3->SR, TIM_SR_UIF);               // сбросим флаг прерывания
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <TIM3_IRQHandler+0x44>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <TIM3_IRQHandler+0x44>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6113      	str	r3, [r2, #16]
    if (over_locking_time)      over_locking_time --;    // для разгона/торможения
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <TIM3_IRQHandler+0x48>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <TIM3_IRQHandler+0x2a>
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <TIM3_IRQHandler+0x48>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <TIM3_IRQHandler+0x48>)
 800145a:	801a      	strh	r2, [r3, #0]
    else {over_locking_time = MAX_SPEED; flag.change_PWM = true;}
}
 800145c:	e007      	b.n	800146e <TIM3_IRQHandler+0x3a>
    else {over_locking_time = MAX_SPEED; flag.change_PWM = true;}
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <TIM3_IRQHandler+0x48>)
 8001460:	2204      	movs	r2, #4
 8001462:	801a      	strh	r2, [r3, #0]
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <TIM3_IRQHandler+0x4c>)
 8001466:	7893      	ldrb	r3, [r2, #2]
 8001468:	f043 0310 	orr.w	r3, r3, #16
 800146c:	7093      	strb	r3, [r2, #2]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40000400 	.word	0x40000400
 800147c:	20000040 	.word	0x20000040
 8001480:	2000010c 	.word	0x2000010c

08001484 <Tim2_init>:

void Tim2_init (void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);     //Запуск тактирования TIM2
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <Tim2_init+0x70>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <Tim2_init+0x70>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 10;                                 //делитель
 8001494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001498:	220a      	movs	r2, #10
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;                               //значение перезагрузки
 800149c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->BDTR |= TIM_BDTR_MOE;                    //разрешим использовать выводы таймера как выходы
 80014a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	6453      	str	r3, [r2, #68]	; 0x44
	SET_BIT(TIM2->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);   //PWM mode 1
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014c2:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCER, TIM_CCER_CC1E);                  //настроим на выход канал 1
 80014c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN);                     //включаем счётчик
 80014d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]


	TIM2->CCR1 = 0;  //коэф. заполнения 1
 80014e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e8:	2200      	movs	r2, #0
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34

}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000

080014f8 <init_MPU6050>:
uint8_t MPU6050_rx_buf [16];

uint8_t setting_comand = 0;
uint8_t* setting = &setting_comand;

void init_MPU6050 (void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af04      	add	r7, sp, #16
	setting_comand = 0;
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <init_MPU6050+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, PWR_MGMT_1, 1, setting, 1, 100);   //выведем из сна
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <init_MPU6050+0xa8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2264      	movs	r2, #100	; 0x64
 800150a:	9202      	str	r2, [sp, #8]
 800150c:	2201      	movs	r2, #1
 800150e:	9201      	str	r2, [sp, #4]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	226b      	movs	r2, #107	; 0x6b
 8001516:	2168      	movs	r1, #104	; 0x68
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <init_MPU6050+0xac>)
 800151a:	f7ff fa93 	bl	8000a44 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 800151e:	200a      	movs	r0, #10
 8001520:	f7ff fdca 	bl	80010b8 <Delay_ms>
	setting_comand = 0x04;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <init_MPU6050+0xa4>)
 8001526:	2204      	movs	r2, #4
 8001528:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, INT_PIN_CFG, 1, setting, 1, 100);  // пин прерывания включить
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <init_MPU6050+0xa8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	9202      	str	r2, [sp, #8]
 8001532:	2201      	movs	r2, #1
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	2237      	movs	r2, #55	; 0x37
 800153c:	2168      	movs	r1, #104	; 0x68
 800153e:	4819      	ldr	r0, [pc, #100]	; (80015a4 <init_MPU6050+0xac>)
 8001540:	f7ff fa80 	bl	8000a44 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 8001544:	200a      	movs	r0, #10
 8001546:	f7ff fdb7 	bl	80010b8 <Delay_ms>
	setting_comand = 0x01;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <init_MPU6050+0xa4>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, INT_ENABLE, 1, setting, 1, 100);   // разрешить прерывания по новым данным
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <init_MPU6050+0xa8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2264      	movs	r2, #100	; 0x64
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	2201      	movs	r2, #1
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	2238      	movs	r2, #56	; 0x38
 8001562:	2168      	movs	r1, #104	; 0x68
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <init_MPU6050+0xac>)
 8001566:	f7ff fa6d 	bl	8000a44 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 800156a:	200a      	movs	r0, #10
 800156c:	f7ff fda4 	bl	80010b8 <Delay_ms>
	setting_comand = 0x07;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <init_MPU6050+0xa4>)
 8001572:	2207      	movs	r2, #7
 8001574:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, SMPLRT_DIV, 1, setting, 1, 100);   // делитель сэмплов
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <init_MPU6050+0xa8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2264      	movs	r2, #100	; 0x64
 800157c:	9202      	str	r2, [sp, #8]
 800157e:	2201      	movs	r2, #1
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	2219      	movs	r2, #25
 8001588:	2168      	movs	r1, #104	; 0x68
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <init_MPU6050+0xac>)
 800158c:	f7ff fa5a 	bl	8000a44 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 8001590:	200a      	movs	r0, #10
 8001592:	f7ff fd91 	bl	80010b8 <Delay_ms>

}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000070 	.word	0x20000070
 80015a0:	20000000 	.word	0x20000000
 80015a4:	40005800 	.word	0x40005800

080015a8 <read_data_MPU6050>:

void read_data_MPU6050 (void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af04      	add	r7, sp, #16
	CMSIS_I2C_MemRead (I2C2, ADR_MPU6050, 0x3B, 1, MPU6050_rx_buf, 14, 100 );
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	230e      	movs	r3, #14
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <read_data_MPU6050+0x24>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	223b      	movs	r2, #59	; 0x3b
 80015be:	2168      	movs	r1, #104	; 0x68
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <read_data_MPU6050+0x28>)
 80015c2:	f7ff fb37 	bl	8000c34 <CMSIS_I2C_MemRead>
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000060 	.word	0x20000060
 80015d0:	40005800 	.word	0x40005800

080015d4 <parsing_MPU6050>:

void parsing_MPU6050 (void){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	int16_t full_scale;
	full_scale = MPU6050_rx_buf [0];
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <parsing_MPU6050+0x19c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [1]; //* (data + 1);
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <parsing_MPU6050+0x19c>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	80fb      	strh	r3, [r7, #6]
	accX_f = (float) full_scale / 32768 * 2;
 80015f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fe61 	bl	80002c0 <__aeabi_i2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff63 	bl	80004d0 <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	4619      	mov	r1, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fda2 	bl	8000158 <__addsf3>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <parsing_MPU6050+0x1a0>)
 800161a:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [2];
 800161c:	4b54      	ldr	r3, [pc, #336]	; (8001770 <parsing_MPU6050+0x19c>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [3]; //* (data + 1);
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <parsing_MPU6050+0x19c>)
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	b21a      	sxth	r2, r3
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4313      	orrs	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
	accY_f = (float) full_scale / 32768 * 2;
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fe40 	bl	80002c0 <__aeabi_i2f>
 8001640:	4603      	mov	r3, r0
 8001642:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff42 	bl	80004d0 <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	4619      	mov	r1, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fd81 	bl	8000158 <__addsf3>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <parsing_MPU6050+0x1a4>)
 800165c:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [4];
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <parsing_MPU6050+0x19c>)
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [5]; //* (data + 1);
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <parsing_MPU6050+0x19c>)
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	b21a      	sxth	r2, r3
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4313      	orrs	r3, r2
 8001676:	80fb      	strh	r3, [r7, #6]
	accZ_f = (float) full_scale / 32768 * 2;
 8001678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fe1f 	bl	80002c0 <__aeabi_i2f>
 8001682:	4603      	mov	r3, r0
 8001684:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff21 	bl	80004d0 <__aeabi_fdiv>
 800168e:	4603      	mov	r3, r0
 8001690:	4619      	mov	r1, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fd60 	bl	8000158 <__addsf3>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <parsing_MPU6050+0x1a8>)
 800169e:	601a      	str	r2, [r3, #0]
	//printf ("X_ax = %d\r\n", (int)accX_f);

	full_scale = MPU6050_rx_buf [8];
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <parsing_MPU6050+0x19c>)
 80016a2:	7a1b      	ldrb	r3, [r3, #8]
 80016a4:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [9]; //* (data + 1);
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <parsing_MPU6050+0x19c>)
 80016b0:	7a5b      	ldrb	r3, [r3, #9]
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	80fb      	strh	r3, [r7, #6]
	gyrX_f = (float) full_scale / 32768 * 250;
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fdfe 	bl	80002c0 <__aeabi_i2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff00 	bl	80004d0 <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	492b      	ldr	r1, [pc, #172]	; (8001780 <parsing_MPU6050+0x1ac>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe47 	bl	8000368 <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <parsing_MPU6050+0x1b0>)
 80016e0:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [10];
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <parsing_MPU6050+0x19c>)
 80016e4:	7a9b      	ldrb	r3, [r3, #10]
 80016e6:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 80016e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [11]; //* (data + 1);
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <parsing_MPU6050+0x19c>)
 80016f2:	7adb      	ldrb	r3, [r3, #11]
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	80fb      	strh	r3, [r7, #6]
	gyrY_f = (float) full_scale / 32768 * 250;
 80016fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fddd 	bl	80002c0 <__aeabi_i2f>
 8001706:	4603      	mov	r3, r0
 8001708:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fedf 	bl	80004d0 <__aeabi_fdiv>
 8001712:	4603      	mov	r3, r0
 8001714:	491a      	ldr	r1, [pc, #104]	; (8001780 <parsing_MPU6050+0x1ac>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fe26 	bl	8000368 <__aeabi_fmul>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <parsing_MPU6050+0x1b4>)
 8001722:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [12];
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <parsing_MPU6050+0x19c>)
 8001726:	7b1b      	ldrb	r3, [r3, #12]
 8001728:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [13]; //* (data + 1);
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <parsing_MPU6050+0x19c>)
 8001734:	7b5b      	ldrb	r3, [r3, #13]
 8001736:	b21a      	sxth	r2, r3
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4313      	orrs	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
	gyrZ_f = (float) full_scale / 32768 * 250;
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fdbc 	bl	80002c0 <__aeabi_i2f>
 8001748:	4603      	mov	r3, r0
 800174a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe febe 	bl	80004d0 <__aeabi_fdiv>
 8001754:	4603      	mov	r3, r0
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <parsing_MPU6050+0x1ac>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fe05 	bl	8000368 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <parsing_MPU6050+0x1b8>)
 8001764:	601a      	str	r2, [r3, #0]

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000060 	.word	0x20000060
 8001774:	20000048 	.word	0x20000048
 8001778:	2000004c 	.word	0x2000004c
 800177c:	20000050 	.word	0x20000050
 8001780:	437a0000 	.word	0x437a0000
 8001784:	20000054 	.word	0x20000054
 8001788:	20000058 	.word	0x20000058
 800178c:	2000005c 	.word	0x2000005c

08001790 <main>:
uint16_t  chanel_A = 0;        // установка шима
uint16_t  chanel_B = 0;
uint16_t  chanel_C = 0;
uint16_t  chanel_D = 0;

int main(void) {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	af00      	add	r7, sp, #0

	CMSIS_RCC_SystemClock_72MHz();           // инит тактирование
 8001794:	f7ff fbe2 	bl	8000f5c <CMSIS_RCC_SystemClock_72MHz>
	CMSIS_SysTick_Timer_init();              // инит сис тик
 8001798:	f7ff fc5c 	bl	8001054 <CMSIS_SysTick_Timer_init>
	CMSIS_PC13_OUTPUT_Push_Pull_init();      // инит выходов
 800179c:	f7ff fd0c 	bl	80011b8 <CMSIS_PC13_OUTPUT_Push_Pull_init>
	CMSIS_B12_Input_init();                  // пин на вход
 80017a0:	f7ff fd46 	bl	8001230 <CMSIS_B12_Input_init>
	Delay_ms(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f7ff fc87 	bl	80010b8 <Delay_ms>
	CMSIS_I2C2_Init();                       // инит И2С
 80017aa:	f7ff f8d7 	bl	800095c <CMSIS_I2C2_Init>
	init_MPU6050();                          // настройка гиро
 80017ae:	f7ff fea3 	bl	80014f8 <init_MPU6050>
	PWM_Out();                               // настройка ШИМ выводов
 80017b2:	f7ff fd5b 	bl	800126c <PWM_Out>
	Tim1_init();                             // инит таймеров
 80017b6:	f7ff fdb5 	bl	8001324 <Tim1_init>
	Tim2_init();
 80017ba:	f7ff fe63 	bl	8001484 <Tim2_init>
	Tim3_init();
 80017be:	f7ff fe11 	bl	80013e4 <Tim3_init>
	init_flag ();                            // сброс флагов в ноль
 80017c2:	f000 fd63 	bl	800228c <init_flag>
	start ();                                // моргаем лампами
 80017c6:	f000 fb9d 	bl	8001f04 <start>
    if (!ZERO_PROGRAM) {                     // калибровка нуля
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <main+0x13c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d11e      	bne.n	8001814 <main+0x84>
		read_data_MPU6050();                 // читаем данные с модуля
 80017d6:	f7ff fee7 	bl	80015a8 <read_data_MPU6050>
		parsing_MPU6050();                   // расбрасываем их в флоаты
 80017da:	f7ff fefb 	bl	80015d4 <parsing_MPU6050>
		write_to_struct ((int32_t)gyrX_f, (int32_t)gyrY_f, (int32_t)gyrZ_f);
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <main+0x140>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe ff86 	bl	80006f4 <__aeabi_f2iz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461c      	mov	r4, r3
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <main+0x144>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff7f 	bl	80006f4 <__aeabi_f2iz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461d      	mov	r5, r3
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <main+0x148>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff78 	bl	80006f4 <__aeabi_f2iz>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff f86c 	bl	80008e8 <write_to_struct>
		write_flash ();
 8001810:	f7fe fff2 	bl	80007f8 <write_flash>
    }
    Delay_ms(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f7ff fc4f 	bl	80010b8 <Delay_ms>
    read_from_flash ();                      // читаем из памяти
 800181a:	f7ff f82f 	bl	800087c <read_from_flash>
	//JoyToTheWorld ();

	for (;;) {
		if (!flag.start_polling) {           // задержка опроса, заходим только когда время выйдет
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <main+0x14c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <main+0xb8>
			read_data_MPU6050();             // читаем данные с модуля
 800182c:	f7ff febc 	bl	80015a8 <read_data_MPU6050>
			parsing_MPU6050();               // расбрасываем их в флоаты
 8001830:	f7ff fed0 	bl	80015d4 <parsing_MPU6050>
			flag.start_polling = POLLING_TIME;  // устанавливаем новое время для опроса
 8001834:	4a29      	ldr	r2, [pc, #164]	; (80018dc <main+0x14c>)
 8001836:	7813      	ldrb	r3, [r2, #0]
 8001838:	2132      	movs	r1, #50	; 0x32
 800183a:	f361 0387 	bfi	r3, r1, #2, #6
 800183e:	7013      	strb	r3, [r2, #0]
			check_new_game();                // проверяем не начать ли нам новую игру
 8001840:	f000 f9d2 	bl	8001be8 <check_new_game>
			check_let ();
 8001844:	f000 fafa 	bl	8001e3c <check_let>
		}
		if (flag.time_of) {                  // это штука чтоб остановить игру один раз
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <main+0x14c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <main+0xd4>
			flag.time_of = false;            // вот этим флагом
 8001856:	4a21      	ldr	r2, [pc, #132]	; (80018dc <main+0x14c>)
 8001858:	7813      	ldrb	r3, [r2, #0]
 800185a:	f36f 0341 	bfc	r3, #1, #1
 800185e:	7013      	strb	r3, [r2, #0]
			stop_game();                     // останавливаем игру
 8001860:	f000 f93c 	bl	8001adc <stop_game>
		}
		if (flag.change_PWM) {               // это плавное нарастание шим, заходим сюда через какое то время, но если мы уже разогнались то ничего неделает
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <main+0x14c>)
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <main+0xf4>
			overclocking_PWM ();             // разгон
 8001872:	f000 f837 	bl	80018e4 <overclocking_PWM>
			braking_PWM ();                  // торможение
 8001876:	f000 f897 	bl	80019a8 <braking_PWM>
			flag.change_PWM = false;         // сбросим флаг, до дальнейшего истечения времени
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <main+0x14c>)
 800187c:	7893      	ldrb	r3, [r2, #2]
 800187e:	f36f 1304 	bfc	r3, #4, #1
 8001882:	7093      	strb	r3, [r2, #2]
		}
		if (flag.provoke) {                  // если поднят флаг провокаций
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <main+0x14c>)
 8001886:	78db      	ldrb	r3, [r3, #3]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0c5      	beq.n	800181e <main+0x8e>
			if (flag.mov_provoke) {          // ждем флаг что можно двигать
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <main+0x14c>)
 8001894:	78db      	ldrb	r3, [r3, #3]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0be      	beq.n	800181e <main+0x8e>
				flag.mov_provoke = false;
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <main+0x14c>)
 80018a2:	78d3      	ldrb	r3, [r2, #3]
 80018a4:	f36f 0382 	bfc	r3, #2, #1
 80018a8:	70d3      	strb	r3, [r2, #3]
				flag.start_game = true;      // поднимаем флаг игры
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <main+0x14c>)
 80018ac:	7813      	ldrb	r3, [r2, #0]
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	7013      	strb	r3, [r2, #0]
				game(SysTimer_ms);           // запускаем игру
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <main+0x150>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fb5d 	bl	8001f78 <game>
				flag.repleys_game = 3;       // с тремя повторениями
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <main+0x14c>)
 80018c0:	7853      	ldrb	r3, [r2, #1]
 80018c2:	2103      	movs	r1, #3
 80018c4:	f361 0305 	bfi	r3, r1, #0, #6
 80018c8:	7053      	strb	r3, [r2, #1]
		if (!flag.start_polling) {           // задержка опроса, заходим только когда время выйдет
 80018ca:	e7a8      	b.n	800181e <main+0x8e>
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	20000054 	.word	0x20000054
 80018d4:	20000058 	.word	0x20000058
 80018d8:	2000005c 	.word	0x2000005c
 80018dc:	2000010c 	.word	0x2000010c
 80018e0:	20000030 	.word	0x20000030

080018e4 <overclocking_PWM>:

		}
	}
}

void overclocking_PWM (void) {               // разгон
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
	if (flag.overlocking) {                  // если включен разгон
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <overclocking_PWM+0xac>)
 80018ec:	789b      	ldrb	r3, [r3, #2]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d045      	beq.n	8001984 <overclocking_PWM+0xa0>
		uint8_t stop_overlocking = 0;        // временная переменная
 80018f8:	2300      	movs	r3, #0
 80018fa:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR1 < chanel_A) TIM1->CCR1 += 1; else stop_overlocking ++;   // если еще не разогнались разгоняемся
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <overclocking_PWM+0xb0>)
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	4a25      	ldr	r2, [pc, #148]	; (8001998 <overclocking_PWM+0xb4>)
 8001902:	8812      	ldrh	r2, [r2, #0]
 8001904:	4293      	cmp	r3, r2
 8001906:	d205      	bcs.n	8001914 <overclocking_PWM+0x30>
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <overclocking_PWM+0xb0>)
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <overclocking_PWM+0xb0>)
 800190e:	3301      	adds	r3, #1
 8001910:	6353      	str	r3, [r2, #52]	; 0x34
 8001912:	e002      	b.n	800191a <overclocking_PWM+0x36>
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	3301      	adds	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR2 < chanel_B) TIM1->CCR2 += 1; else stop_overlocking ++;   // если же разогнались плюсуем переменную чтоб остановить разгон
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <overclocking_PWM+0xb0>)
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	4a1f      	ldr	r2, [pc, #124]	; (800199c <overclocking_PWM+0xb8>)
 8001920:	8812      	ldrh	r2, [r2, #0]
 8001922:	4293      	cmp	r3, r2
 8001924:	d205      	bcs.n	8001932 <overclocking_PWM+0x4e>
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <overclocking_PWM+0xb0>)
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <overclocking_PWM+0xb0>)
 800192c:	3301      	adds	r3, #1
 800192e:	6393      	str	r3, [r2, #56]	; 0x38
 8001930:	e002      	b.n	8001938 <overclocking_PWM+0x54>
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	3301      	adds	r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR3 < chanel_C) TIM1->CCR3 += 1; else stop_overlocking ++;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <overclocking_PWM+0xb0>)
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <overclocking_PWM+0xbc>)
 800193e:	8812      	ldrh	r2, [r2, #0]
 8001940:	4293      	cmp	r3, r2
 8001942:	d205      	bcs.n	8001950 <overclocking_PWM+0x6c>
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <overclocking_PWM+0xb0>)
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <overclocking_PWM+0xb0>)
 800194a:	3301      	adds	r3, #1
 800194c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800194e:	e002      	b.n	8001956 <overclocking_PWM+0x72>
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3301      	adds	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR4 < chanel_D) TIM1->CCR4 += 1; else stop_overlocking ++;
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <overclocking_PWM+0xb0>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <overclocking_PWM+0xc0>)
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d205      	bcs.n	800196e <overclocking_PWM+0x8a>
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <overclocking_PWM+0xb0>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <overclocking_PWM+0xb0>)
 8001968:	3301      	adds	r3, #1
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	e002      	b.n	8001974 <overclocking_PWM+0x90>
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	3301      	adds	r3, #1
 8001972:	71fb      	strb	r3, [r7, #7]
		if (stop_overlocking == 4) {flag.overlocking = false; }                 // если все 4 уже разогнались тормозим
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d104      	bne.n	8001984 <overclocking_PWM+0xa0>
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <overclocking_PWM+0xac>)
 800197c:	7893      	ldrb	r3, [r2, #2]
 800197e:	f36f 0382 	bfc	r3, #2, #1
 8001982:	7093      	strb	r3, [r2, #2]
	}
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000010c 	.word	0x2000010c
 8001994:	40012c00 	.word	0x40012c00
 8001998:	20000110 	.word	0x20000110
 800199c:	20000112 	.word	0x20000112
 80019a0:	20000114 	.word	0x20000114
 80019a4:	20000116 	.word	0x20000116

080019a8 <braking_PWM>:

void braking_PWM (void) {                    // торможение. аналогично разгону
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
	if (flag.braking) {
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <braking_PWM+0xcc>)
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d056      	beq.n	8001a6a <braking_PWM+0xc2>
		uint8_t stop_braking = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR1 > chanel_A) TIM1->CCR1 -= 1; else stop_braking ++;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <braking_PWM+0xd0>)
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	4a2d      	ldr	r2, [pc, #180]	; (8001a7c <braking_PWM+0xd4>)
 80019c6:	8812      	ldrh	r2, [r2, #0]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d905      	bls.n	80019d8 <braking_PWM+0x30>
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <braking_PWM+0xd0>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <braking_PWM+0xd0>)
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6353      	str	r3, [r2, #52]	; 0x34
 80019d6:	e002      	b.n	80019de <braking_PWM+0x36>
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	3301      	adds	r3, #1
 80019dc:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR2 > chanel_B) TIM1->CCR2 -= 1; else stop_braking ++;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <braking_PWM+0xd0>)
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <braking_PWM+0xd8>)
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d905      	bls.n	80019f6 <braking_PWM+0x4e>
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <braking_PWM+0xd0>)
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <braking_PWM+0xd0>)
 80019f0:	3b01      	subs	r3, #1
 80019f2:	6393      	str	r3, [r2, #56]	; 0x38
 80019f4:	e002      	b.n	80019fc <braking_PWM+0x54>
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3301      	adds	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR3 > chanel_C) TIM1->CCR3 -= 1; else stop_braking ++;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <braking_PWM+0xd0>)
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <braking_PWM+0xdc>)
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d905      	bls.n	8001a14 <braking_PWM+0x6c>
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <braking_PWM+0xd0>)
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <braking_PWM+0xd0>)
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a12:	e002      	b.n	8001a1a <braking_PWM+0x72>
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	3301      	adds	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR4 > chanel_D) TIM1->CCR4 -= 1; else stop_braking ++;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <braking_PWM+0xd0>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <braking_PWM+0xe0>)
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d905      	bls.n	8001a32 <braking_PWM+0x8a>
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <braking_PWM+0xd0>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <braking_PWM+0xd0>)
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	e002      	b.n	8001a38 <braking_PWM+0x90>
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3301      	adds	r3, #1
 8001a36:	71fb      	strb	r3, [r7, #7]
		if (stop_braking == 4) { flag.braking = false; flag.time_of = true; LED_L_ON; LED_R_ON;}  // только еще включаем лампы
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d115      	bne.n	8001a6a <braking_PWM+0xc2>
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <braking_PWM+0xcc>)
 8001a40:	7893      	ldrb	r3, [r2, #2]
 8001a42:	f36f 03c3 	bfc	r3, #3, #1
 8001a46:	7093      	strb	r3, [r2, #2]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <braking_PWM+0xcc>)
 8001a4a:	7813      	ldrb	r3, [r2, #0]
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	7013      	strb	r3, [r2, #0]
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <braking_PWM+0xe4>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <braking_PWM+0xe4>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6113      	str	r3, [r2, #16]
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <braking_PWM+0xe4>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <braking_PWM+0xe4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6113      	str	r3, [r2, #16]
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	2000010c 	.word	0x2000010c
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	20000110 	.word	0x20000110
 8001a80:	20000112 	.word	0x20000112
 8001a84:	20000114 	.word	0x20000114
 8001a88:	20000116 	.word	0x20000116
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <random_time>:

uint32_t random_time (uint32_t in_time){       // рандомное время
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	uint32_t mirror;                           // зеркало
	mirror = in_time % MAX_TIME;               // присваиваем число которое всегда будет в диапазоне от нуля до MAX_TIME
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <random_time+0x44>)
 8001a9c:	fba2 1203 	umull	r1, r2, r2, r3
 8001aa0:	0992      	lsrs	r2, r2, #6
 8001aa2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001aa6:	fb01 f202 	mul.w	r2, r1, r2
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
	if (mirror < MIN_TIME) mirror = MIN_TIME;  // но так как ноль нам не подходит то делаем минимум
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab4:	d202      	bcs.n	8001abc <random_time+0x2c>
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	60fb      	str	r3, [r7, #12]
	LED_ON;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <random_time+0x48>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <random_time+0x48>)
 8001ac2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac6:	6113      	str	r3, [r2, #16]
	return mirror;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	057619f1 	.word	0x057619f1
 8001ad8:	40011000 	.word	0x40011000

08001adc <stop_game>:

void stop_game(void) {                         // остановить игру
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (TIM1->CCR1 > 0 || TIM1->CCR2 > 0 || TIM1->CCR3 > 0 || TIM1->CCR4 > 0) {     // проверим шим у нас в нулях или не
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <stop_game+0xb4>)
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <stop_game+0x24>
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <stop_game+0xb4>)
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <stop_game+0x24>
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <stop_game+0xb4>)
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <stop_game+0x24>
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <stop_game+0xb4>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d011      	beq.n	8001b24 <stop_game+0x48>
		chanel_A = 0;    // если нет, ставим коэф. заполнения 0
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <stop_game+0xb8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
		chanel_B = 0;
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <stop_game+0xbc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
		chanel_C = 0;
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <stop_game+0xc0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
		chanel_D = 0;
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <stop_game+0xc4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
		flag.braking = true;     // поднимаем флаг торможения
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <stop_game+0xc8>)
 8001b1a:	7893      	ldrb	r3, [r2, #2]
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	7093      	strb	r3, [r2, #2]
		return;                  // покидаем функцию
 8001b22:	e034      	b.n	8001b8e <stop_game+0xb2>
	}
	if (flag.repleys_game) {     // тут мы потихоньку сбрасываем количество повторений
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <stop_game+0xc8>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d013      	beq.n	8001b5a <stop_game+0x7e>
		flag.repleys_game -- ;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <stop_game+0xc8>)
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	333f      	adds	r3, #63	; 0x3f
 8001b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b42:	b2d9      	uxtb	r1, r3
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <stop_game+0xc8>)
 8001b46:	7853      	ldrb	r3, [r2, #1]
 8001b48:	f361 0305 	bfi	r3, r1, #0, #6
 8001b4c:	7053      	strb	r3, [r2, #1]
		game(SysTimer_ms);       // запуская новую игру
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <stop_game+0xcc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fa10 	bl	8001f78 <game>
		return;
 8001b58:	e019      	b.n	8001b8e <stop_game+0xb2>
	}
	flag.start_game = false;     // если уже нету повторений говорим что игра выкл
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <stop_game+0xc8>)
 8001b5c:	7813      	ldrb	r3, [r2, #0]
 8001b5e:	f36f 0300 	bfc	r3, #0, #1
 8001b62:	7013      	strb	r3, [r2, #0]
	restart_value ();            // сбрасываем показания накопленных значений гиро
 8001b64:	f000 f828 	bl	8001bb8 <restart_value>
	LED_OFF;                     // лампу на плате
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <stop_game+0xd0>)
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <stop_game+0xd0>)
 8001b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b72:	6113      	str	r3, [r2, #16]
	time_to_next_game = PAUSE_ON_GAME;  // и вводим ограничитель между играми чтоб можно было остановится
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <stop_game+0xd4>)
 8001b76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b7a:	801a      	strh	r2, [r3, #0]
	flag.provoke = true;         // и запускаем возможность провокаций
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <stop_game+0xc8>)
 8001b7e:	78d3      	ldrb	r3, [r2, #3]
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	70d3      	strb	r3, [r2, #3]
	provoke = PROVOKE;           // выставляем время между ними
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <stop_game+0xd8>)
 8001b88:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001b8c:	801a      	strh	r2, [r3, #0]
}
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	20000110 	.word	0x20000110
 8001b98:	20000112 	.word	0x20000112
 8001b9c:	20000114 	.word	0x20000114
 8001ba0:	20000116 	.word	0x20000116
 8001ba4:	2000010c 	.word	0x2000010c
 8001ba8:	20000030 	.word	0x20000030
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	20000042 	.word	0x20000042
 8001bb4:	20000044 	.word	0x20000044

08001bb8 <restart_value>:

void restart_value (void) {      // сброс данных
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	sleep_gyrX = 0;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <restart_value+0x24>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	sleep_gyrY = 0;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <restart_value+0x28>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	sleep_gyrZ = 0;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <restart_value+0x2c>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000074 	.word	0x20000074
 8001be0:	20000078 	.word	0x20000078
 8001be4:	2000007c 	.word	0x2000007c

08001be8 <check_new_game>:

void check_new_game(void) {      // проверка не нужно ли начать новую игру
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	if (!flag.start_game && !flag.repleys_game && !time_to_next_game) {    // если у нас не игра, если количество реплеев 0, и если выдержали паузу между играми
 8001bec:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <check_new_game+0x220>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 8104 	bne.w	8001e04 <check_new_game+0x21c>
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <check_new_game+0x220>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80fc 	bne.w	8001e04 <check_new_game+0x21c>
 8001c0c:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <check_new_game+0x224>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 80f7 	bne.w	8001e04 <check_new_game+0x21c>
		sleep_gyrX += gyrX_f;             // потихоньку увеличиваем переменную хранения гиро
 8001c16:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <check_new_game+0x228>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	; (8001e14 <check_new_game+0x22c>)
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fa99 	bl	8000158 <__addsf3>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <check_new_game+0x228>)
 8001c2c:	601a      	str	r2, [r3, #0]
		sleep_gyrY += gyrY_f;
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <check_new_game+0x230>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7a      	ldr	r2, [pc, #488]	; (8001e1c <check_new_game+0x234>)
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fa8d 	bl	8000158 <__addsf3>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <check_new_game+0x230>)
 8001c44:	601a      	str	r2, [r3, #0]
		sleep_gyrZ += gyrZ_f;
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <check_new_game+0x238>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a76      	ldr	r2, [pc, #472]	; (8001e24 <check_new_game+0x23c>)
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fa81 	bl	8000158 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <check_new_game+0x238>)
 8001c5c:	601a      	str	r2, [r3, #0]
		if (sleep_gyrX >= MAX_VALUE || sleep_gyrY >= MAX_VALUE || sleep_gyrZ >= MAX_VALUE) {  // если по какой то из осей есть движение
 8001c5e:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <check_new_game+0x228>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4971      	ldr	r1, [pc, #452]	; (8001e28 <check_new_game+0x240>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd31 	bl	80006cc <__aeabi_fcmpge>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <check_new_game+0xac>
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <check_new_game+0x230>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	496c      	ldr	r1, [pc, #432]	; (8001e28 <check_new_game+0x240>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fd28 	bl	80006cc <__aeabi_fcmpge>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <check_new_game+0xac>
 8001c82:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <check_new_game+0x238>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4968      	ldr	r1, [pc, #416]	; (8001e28 <check_new_game+0x240>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fd1f 	bl	80006cc <__aeabi_fcmpge>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01f      	beq.n	8001cd4 <check_new_game+0xec>
			flag.start_game = true;                         // поднимаем флаг
 8001c94:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <check_new_game+0x220>)
 8001c96:	7813      	ldrb	r3, [r2, #0]
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	7013      	strb	r3, [r2, #0]
			game(SysTimer_ms);                              // запускаем игру
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <check_new_game+0x244>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f968 	bl	8001f78 <game>
			flag.repleys_game = SysTimer_ms % MAX_REPLEY;   // и выбираем количество повторов
 8001ca8:	4b60      	ldr	r3, [pc, #384]	; (8001e2c <check_new_game+0x244>)
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <check_new_game+0x248>)
 8001cae:	fba3 2301 	umull	r2, r3, r3, r1
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	1aca      	subs	r2, r1, r3
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc4:	b2d9      	uxtb	r1, r3
 8001cc6:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <check_new_game+0x220>)
 8001cc8:	7853      	ldrb	r3, [r2, #1]
 8001cca:	f361 0305 	bfi	r3, r1, #0, #6
 8001cce:	7053      	strb	r3, [r2, #1]
			restart_value ();                               // и сбросим переменные, чтоб их использовать в движении
 8001cd0:	f7ff ff72 	bl	8001bb8 <restart_value>
		}
		if (sleep_gyrX <= RMAX_VALUE || sleep_gyrY <= RMAX_VALUE || sleep_gyrZ <= RMAX_VALUE) {  // тоже самое если показания в минус
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <check_new_game+0x228>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4956      	ldr	r1, [pc, #344]	; (8001e34 <check_new_game+0x24c>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fcec 	bl	80006b8 <__aeabi_fcmple>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d111      	bne.n	8001d0a <check_new_game+0x122>
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <check_new_game+0x230>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4952      	ldr	r1, [pc, #328]	; (8001e34 <check_new_game+0x24c>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fce3 	bl	80006b8 <__aeabi_fcmple>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <check_new_game+0x122>
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <check_new_game+0x238>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <check_new_game+0x24c>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fcda 	bl	80006b8 <__aeabi_fcmple>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01f      	beq.n	8001d4a <check_new_game+0x162>
			flag.start_game = true;
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	; (8001e08 <check_new_game+0x220>)
 8001d0c:	7813      	ldrb	r3, [r2, #0]
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	7013      	strb	r3, [r2, #0]
			game(SysTimer_ms);
 8001d14:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <check_new_game+0x244>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f92d 	bl	8001f78 <game>
			flag.repleys_game = SysTimer_ms % MAX_REPLEY;
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <check_new_game+0x244>)
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <check_new_game+0x248>)
 8001d24:	fba3 2301 	umull	r2, r3, r3, r1
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	1aca      	subs	r2, r1, r3
 8001d34:	4613      	mov	r3, r2
 8001d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d3a:	b2d9      	uxtb	r1, r3
 8001d3c:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <check_new_game+0x220>)
 8001d3e:	7853      	ldrb	r3, [r2, #1]
 8001d40:	f361 0305 	bfi	r3, r1, #0, #6
 8001d44:	7053      	strb	r3, [r2, #1]
			restart_value ();
 8001d46:	f7ff ff37 	bl	8001bb8 <restart_value>
		}
		if (sleep_gyrX > 0) sleep_gyrX -= REVERS_COUNT; else sleep_gyrX += REVERS_COUNT;       // и паралельно сбросим показания
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <check_new_game+0x228>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fcc4 	bl	80006e0 <__aeabi_fcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <check_new_game+0x18c>
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <check_new_game+0x228>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4935      	ldr	r1, [pc, #212]	; (8001e38 <check_new_game+0x250>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe f9f5 	bl	8000154 <__aeabi_fsub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <check_new_game+0x228>)
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e009      	b.n	8001d88 <check_new_game+0x1a0>
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <check_new_game+0x228>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	492f      	ldr	r1, [pc, #188]	; (8001e38 <check_new_game+0x250>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe f9ec 	bl	8000158 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <check_new_game+0x228>)
 8001d86:	601a      	str	r2, [r3, #0]
		if (sleep_gyrY > 0) sleep_gyrY -= REVERS_COUNT; else sleep_gyrY += REVERS_COUNT;
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <check_new_game+0x230>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fca5 	bl	80006e0 <__aeabi_fcmpgt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <check_new_game+0x1ca>
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <check_new_game+0x230>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4925      	ldr	r1, [pc, #148]	; (8001e38 <check_new_game+0x250>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe f9d6 	bl	8000154 <__aeabi_fsub>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <check_new_game+0x230>)
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e009      	b.n	8001dc6 <check_new_game+0x1de>
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <check_new_game+0x230>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4920      	ldr	r1, [pc, #128]	; (8001e38 <check_new_game+0x250>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe f9cd 	bl	8000158 <__addsf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <check_new_game+0x230>)
 8001dc4:	601a      	str	r2, [r3, #0]
		if (sleep_gyrZ > 0) sleep_gyrZ -= REVERS_COUNT; else sleep_gyrZ += REVERS_COUNT;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <check_new_game+0x238>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fc86 	bl	80006e0 <__aeabi_fcmpgt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <check_new_game+0x208>
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <check_new_game+0x238>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4916      	ldr	r1, [pc, #88]	; (8001e38 <check_new_game+0x250>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe f9b7 	bl	8000154 <__aeabi_fsub>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <check_new_game+0x238>)
 8001dec:	601a      	str	r2, [r3, #0]
	}
}
 8001dee:	e009      	b.n	8001e04 <check_new_game+0x21c>
		if (sleep_gyrZ > 0) sleep_gyrZ -= REVERS_COUNT; else sleep_gyrZ += REVERS_COUNT;
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <check_new_game+0x238>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4910      	ldr	r1, [pc, #64]	; (8001e38 <check_new_game+0x250>)
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe f9ae 	bl	8000158 <__addsf3>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <check_new_game+0x238>)
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000010c 	.word	0x2000010c
 8001e0c:	20000042 	.word	0x20000042
 8001e10:	20000074 	.word	0x20000074
 8001e14:	20000054 	.word	0x20000054
 8001e18:	20000078 	.word	0x20000078
 8001e1c:	20000058 	.word	0x20000058
 8001e20:	2000007c 	.word	0x2000007c
 8001e24:	2000005c 	.word	0x2000005c
 8001e28:	43fa0000 	.word	0x43fa0000
 8001e2c:	20000030 	.word	0x20000030
 8001e30:	aaaaaaab 	.word	0xaaaaaaab
 8001e34:	c3fa0000 	.word	0xc3fa0000
 8001e38:	42200000 	.word	0x42200000

08001e3c <check_let>:

void check_let (void) {
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
	if (flag.start_game) {
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <check_let+0xac>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d046      	beq.n	8001ede <check_let+0xa2>
		int sum = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
		buf_filtr [count_buf] = (int32_t) gyrX_f + (int32_t) gyrY_f + (int32_t) gyrZ_f;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <check_let+0xb0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fc4b 	bl	80006f4 <__aeabi_f2iz>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <check_let+0xb4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fc45 	bl	80006f4 <__aeabi_f2iz>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	441c      	add	r4, r3
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <check_let+0xb8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fc3e 	bl	80006f4 <__aeabi_f2iz>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <check_let+0xbc>)
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4423      	add	r3, r4
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <check_let+0xc0>)
 8001e84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if (count_buf < 32)count_buf ++;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <check_let+0xbc>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b1f      	cmp	r3, #31
 8001e8e:	d806      	bhi.n	8001e9e <check_let+0x62>
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <check_let+0xbc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <check_let+0xbc>)
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e002      	b.n	8001ea4 <check_let+0x68>
		else count_buf = 0;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <check_let+0xbc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 32; i ++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	e00c      	b.n	8001ec4 <check_let+0x88>
			sum += abs (buf_filtr [i]);
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <check_let+0xc0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bfb8      	it	lt
 8001eb6:	425b      	neglt	r3, r3
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 32; i ++) {
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	ddef      	ble.n	8001eaa <check_let+0x6e>
		}
		sum = sum >> 5;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	115b      	asrs	r3, r3, #5
 8001ece:	607b      	str	r3, [r7, #4]
		if (sum > MAX_ROUND) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001ed6:	dd02      	ble.n	8001ede <check_let+0xa2>
			time_game = 5;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <check_let+0xc4>)
 8001eda:	2205      	movs	r2, #5
 8001edc:	601a      	str	r2, [r3, #0]

		/*if ((gyrX_f + gyrY_f + gyrZ_f) >  MAX_ROUND) {
			time_game = 5;
		}*/
	}
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000010c 	.word	0x2000010c
 8001eec:	20000054 	.word	0x20000054
 8001ef0:	20000058 	.word	0x20000058
 8001ef4:	2000005c 	.word	0x2000005c
 8001ef8:	20000108 	.word	0x20000108
 8001efc:	20000080 	.word	0x20000080
 8001f00:	2000003c 	.word	0x2000003c

08001f04 <start>:

void start (void) {    // моргание при старте
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	LED_L_ON;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <start+0x70>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <start+0x70>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 8001f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f18:	f7ff f8ce 	bl	80010b8 <Delay_ms>
	LED_R_ON;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <start+0x70>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <start+0x70>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 8001f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2c:	f7ff f8c4 	bl	80010b8 <Delay_ms>
	LED_L_OFF;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <start+0x70>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <start+0x70>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3a:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 8001f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f40:	f7ff f8ba 	bl	80010b8 <Delay_ms>
	LED_R_OFF;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <start+0x70>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <start+0x70>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f7ff f8b0 	bl	80010b8 <Delay_ms>
	LED_L_ON; LED_R_ON;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <start+0x70>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <start+0x70>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6113      	str	r3, [r2, #16]
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <start+0x70>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4a02      	ldr	r2, [pc, #8]	; (8001f74 <start+0x70>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6113      	str	r3, [r2, #16]
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40010c00 	.word	0x40010c00

08001f78 <game>:

void game(uint32_t game) {              // игра
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	flag.provoke = false;               // запретим провокацию
 8001f80:	4aa6      	ldr	r2, [pc, #664]	; (800221c <game+0x2a4>)
 8001f82:	78d3      	ldrb	r3, [r2, #3]
 8001f84:	f36f 0341 	bfc	r3, #1, #1
 8001f88:	70d3      	strb	r3, [r2, #3]
	uint32_t mirror = game % MAX_PWM;   // промежуточная переменная для constrain
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	085a      	lsrs	r2, r3, #1
 8001f8e:	49a4      	ldr	r1, [pc, #656]	; (8002220 <game+0x2a8>)
 8001f90:	fba1 1202 	umull	r1, r2, r1, r2
 8001f94:	0952      	lsrs	r2, r2, #5
 8001f96:	f240 3152 	movw	r1, #850	; 0x352
 8001f9a:	fb01 f202 	mul.w	r2, r1, r2
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
	switch (game % 8) {                 // +1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	2b07      	cmp	r3, #7
 8001faa:	f200 810f 	bhi.w	80021cc <game+0x254>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <game+0x3c>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001fd5 	.word	0x08001fd5
 8001fb8:	0800201d 	.word	0x0800201d
 8001fbc:	08002065 	.word	0x08002065
 8001fc0:	0800209b 	.word	0x0800209b
 8001fc4:	080020d1 	.word	0x080020d1
 8001fc8:	08002107 	.word	0x08002107
 8001fcc:	0800213d 	.word	0x0800213d
 8001fd0:	08002185 	.word	0x08002185
	case 0:
		set_PWM (constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM),0);  // установим шим под каждый вариант игры
 8001fd4:	f240 3252 	movw	r2, #850	; 0x352
 8001fd8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f995 	bl	800230c <constrain>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29c      	uxth	r4, r3
 8001fe6:	f240 3252 	movw	r2, #850	; 0x352
 8001fea:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f98c 	bl	800230c <constrain>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f000 f915 	bl	800222c <set_PWM>
		time_game = random_time(game);  // время игры
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fd44 	bl	8001a90 <random_time>
 8002008:	4603      	mov	r3, r0
 800200a:	4a86      	ldr	r2, [pc, #536]	; (8002224 <game+0x2ac>)
 800200c:	6013      	str	r3, [r2, #0]
		LED_L_OFF;                      // светик рандомный
 800200e:	4b86      	ldr	r3, [pc, #536]	; (8002228 <game+0x2b0>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	4a85      	ldr	r2, [pc, #532]	; (8002228 <game+0x2b0>)
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	6113      	str	r3, [r2, #16]
		break;
 800201a:	e0fb      	b.n	8002214 <game+0x29c>
	case 1:
		set_PWM (0,constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM));
 800201c:	f240 3252 	movw	r2, #850	; 0x352
 8002020:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f971 	bl	800230c <constrain>
 800202a:	4603      	mov	r3, r0
 800202c:	b29c      	uxth	r4, r3
 800202e:	f240 3252 	movw	r2, #850	; 0x352
 8002032:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f968 	bl	800230c <constrain>
 800203c:	4603      	mov	r3, r0
 800203e:	b29b      	uxth	r3, r3
 8002040:	2200      	movs	r2, #0
 8002042:	4621      	mov	r1, r4
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f8f1 	bl	800222c <set_PWM>
		time_game = random_time(game);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fd20 	bl	8001a90 <random_time>
 8002050:	4603      	mov	r3, r0
 8002052:	4a74      	ldr	r2, [pc, #464]	; (8002224 <game+0x2ac>)
 8002054:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 8002056:	4b74      	ldr	r3, [pc, #464]	; (8002228 <game+0x2b0>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	4a73      	ldr	r2, [pc, #460]	; (8002228 <game+0x2b0>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6113      	str	r3, [r2, #16]
		break;
 8002062:	e0d7      	b.n	8002214 <game+0x29c>
	case 2:
		set_PWM (0,constrain (mirror, MIN_PWM, MAX_PWM),0,0);
 8002064:	f240 3252 	movw	r2, #850	; 0x352
 8002068:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f94d 	bl	800230c <constrain>
 8002072:	4603      	mov	r3, r0
 8002074:	b299      	uxth	r1, r3
 8002076:	2300      	movs	r3, #0
 8002078:	2200      	movs	r2, #0
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f8d6 	bl	800222c <set_PWM>
		time_game = random_time(game);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fd05 	bl	8001a90 <random_time>
 8002086:	4603      	mov	r3, r0
 8002088:	4a66      	ldr	r2, [pc, #408]	; (8002224 <game+0x2ac>)
 800208a:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 800208c:	4b66      	ldr	r3, [pc, #408]	; (8002228 <game+0x2b0>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <game+0x2b0>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002096:	6113      	str	r3, [r2, #16]
		break;
 8002098:	e0bc      	b.n	8002214 <game+0x29c>
	case 3:
		set_PWM (0,0,constrain (mirror, MIN_PWM, MAX_PWM),0);
 800209a:	f240 3252 	movw	r2, #850	; 0x352
 800209e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f932 	bl	800230c <constrain>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f8bb 	bl	800222c <set_PWM>
		time_game = random_time(game);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fcea 	bl	8001a90 <random_time>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a59      	ldr	r2, [pc, #356]	; (8002224 <game+0x2ac>)
 80020c0:	6013      	str	r3, [r2, #0]
		LED_L_OFF;
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <game+0x2b0>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <game+0x2b0>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6113      	str	r3, [r2, #16]
		break;
 80020ce:	e0a1      	b.n	8002214 <game+0x29c>
	case 4:
		set_PWM (0,0,0,constrain (mirror, MIN_PWM, MAX_PWM));
 80020d0:	f240 3252 	movw	r2, #850	; 0x352
 80020d4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f917 	bl	800230c <constrain>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 f8a0 	bl	800222c <set_PWM>
		time_game = random_time(game);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fccf 	bl	8001a90 <random_time>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <game+0x2ac>)
 80020f6:	6013      	str	r3, [r2, #0]
		LED_L_OFF;
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <game+0x2b0>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <game+0x2b0>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6113      	str	r3, [r2, #16]
		break;
 8002104:	e086      	b.n	8002214 <game+0x29c>
	case 5:
		set_PWM (constrain (mirror, MIN_PWM, MAX_PWM),0,0,0);
 8002106:	f240 3252 	movw	r2, #850	; 0x352
 800210a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8fc 	bl	800230c <constrain>
 8002114:	4603      	mov	r3, r0
 8002116:	b298      	uxth	r0, r3
 8002118:	2300      	movs	r3, #0
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	f000 f885 	bl	800222c <set_PWM>
		time_game = random_time(game);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fcb4 	bl	8001a90 <random_time>
 8002128:	4603      	mov	r3, r0
 800212a:	4a3e      	ldr	r2, [pc, #248]	; (8002224 <game+0x2ac>)
 800212c:	6013      	str	r3, [r2, #0]
		LED_L_OFF;
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <game+0x2b0>)
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <game+0x2b0>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6113      	str	r3, [r2, #16]
		break;
 800213a:	e06b      	b.n	8002214 <game+0x29c>
	case 6:
		set_PWM (0,constrain (mirror, MIN_PWM, MAX_PWM),constrain (mirror, MIN_PWM, MAX_PWM),0);
 800213c:	f240 3252 	movw	r2, #850	; 0x352
 8002140:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f8e1 	bl	800230c <constrain>
 800214a:	4603      	mov	r3, r0
 800214c:	b29c      	uxth	r4, r3
 800214e:	f240 3252 	movw	r2, #850	; 0x352
 8002152:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f8d8 	bl	800230c <constrain>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	4621      	mov	r1, r4
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f861 	bl	800222c <set_PWM>
		time_game = random_time(game);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fc90 	bl	8001a90 <random_time>
 8002170:	4603      	mov	r3, r0
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <game+0x2ac>)
 8002174:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <game+0x2b0>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <game+0x2b0>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6113      	str	r3, [r2, #16]
		break;
 8002182:	e047      	b.n	8002214 <game+0x29c>
	case 7:
		set_PWM (constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM),0);
 8002184:	f240 3252 	movw	r2, #850	; 0x352
 8002188:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f8bd 	bl	800230c <constrain>
 8002192:	4603      	mov	r3, r0
 8002194:	b29c      	uxth	r4, r3
 8002196:	f240 3252 	movw	r2, #850	; 0x352
 800219a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8b4 	bl	800230c <constrain>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	4620      	mov	r0, r4
 80021ae:	f000 f83d 	bl	800222c <set_PWM>
		time_game = random_time(game);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fc6c 	bl	8001a90 <random_time>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <game+0x2ac>)
 80021bc:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <game+0x2b0>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	4a19      	ldr	r2, [pc, #100]	; (8002228 <game+0x2b0>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6113      	str	r3, [r2, #16]
		break;
 80021ca:	e023      	b.n	8002214 <game+0x29c>
	default:
		set_PWM (constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM),0);
 80021cc:	f240 3252 	movw	r2, #850	; 0x352
 80021d0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f899 	bl	800230c <constrain>
 80021da:	4603      	mov	r3, r0
 80021dc:	b29c      	uxth	r4, r3
 80021de:	f240 3252 	movw	r2, #850	; 0x352
 80021e2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f890 	bl	800230c <constrain>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 f819 	bl	800222c <set_PWM>
		time_game = random_time(game);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fc48 	bl	8001a90 <random_time>
 8002200:	4603      	mov	r3, r0
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <game+0x2ac>)
 8002204:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <game+0x2b0>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <game+0x2b0>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6113      	str	r3, [r2, #16]
		break;
 8002212:	bf00      	nop
	}
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	2000010c 	.word	0x2000010c
 8002220:	134679ad 	.word	0x134679ad
 8002224:	2000003c 	.word	0x2000003c
 8002228:	40010c00 	.word	0x40010c00

0800222c <set_PWM>:

void set_PWM (uint16_t ch_A, uint16_t ch_B, uint16_t ch_C, uint16_t ch_D) {
 800222c:	b490      	push	{r4, r7}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	4603      	mov	r3, r0
 8002240:	80bb      	strh	r3, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	803b      	strh	r3, [r7, #0]
	chanel_A = ch_A;    // перенесем коэф
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <set_PWM+0x4c>)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	8013      	strh	r3, [r2, #0]
	chanel_B = ch_B;
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <set_PWM+0x50>)
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	8013      	strh	r3, [r2, #0]
	chanel_C = ch_C;
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <set_PWM+0x54>)
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	8013      	strh	r3, [r2, #0]
	chanel_D = ch_D;
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <set_PWM+0x58>)
 800225e:	883b      	ldrh	r3, [r7, #0]
 8002260:	8013      	strh	r3, [r2, #0]
	flag.overlocking = true;
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <set_PWM+0x5c>)
 8002264:	7893      	ldrb	r3, [r2, #2]
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	7093      	strb	r3, [r2, #2]
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bc90      	pop	{r4, r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000110 	.word	0x20000110
 800227c:	20000112 	.word	0x20000112
 8002280:	20000114 	.word	0x20000114
 8002284:	20000116 	.word	0x20000116
 8002288:	2000010c 	.word	0x2000010c

0800228c <init_flag>:

void init_flag (void) {          // инициализируем флаги при старте
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	flag.start_game = false;
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <init_flag+0x7c>)
 8002292:	7813      	ldrb	r3, [r2, #0]
 8002294:	f36f 0300 	bfc	r3, #0, #1
 8002298:	7013      	strb	r3, [r2, #0]
	flag.time_of = 0;
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <init_flag+0x7c>)
 800229c:	7813      	ldrb	r3, [r2, #0]
 800229e:	f36f 0341 	bfc	r3, #1, #1
 80022a2:	7013      	strb	r3, [r2, #0]
	flag.start_polling = 0;
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <init_flag+0x7c>)
 80022a6:	7813      	ldrb	r3, [r2, #0]
 80022a8:	f36f 0387 	bfc	r3, #2, #6
 80022ac:	7013      	strb	r3, [r2, #0]
	flag.repleys_game = 0;
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <init_flag+0x7c>)
 80022b0:	7853      	ldrb	r3, [r2, #1]
 80022b2:	f36f 0305 	bfc	r3, #0, #6
 80022b6:	7053      	strb	r3, [r2, #1]
	flag.repleys_buzer = 0;
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <init_flag+0x7c>)
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f36f 3391 	bfc	r3, #14, #4
 80022c0:	6013      	str	r3, [r2, #0]
	flag.overlocking = false;
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <init_flag+0x7c>)
 80022c4:	7893      	ldrb	r3, [r2, #2]
 80022c6:	f36f 0382 	bfc	r3, #2, #1
 80022ca:	7093      	strb	r3, [r2, #2]
	flag.braking = false;
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <init_flag+0x7c>)
 80022ce:	7893      	ldrb	r3, [r2, #2]
 80022d0:	f36f 03c3 	bfc	r3, #3, #1
 80022d4:	7093      	strb	r3, [r2, #2]
	flag.change_PWM = false;
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <init_flag+0x7c>)
 80022d8:	7893      	ldrb	r3, [r2, #2]
 80022da:	f36f 1304 	bfc	r3, #4, #1
 80022de:	7093      	strb	r3, [r2, #2]
	flag.start_polling = 0;
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <init_flag+0x7c>)
 80022e2:	7813      	ldrb	r3, [r2, #0]
 80022e4:	f36f 0387 	bfc	r3, #2, #6
 80022e8:	7013      	strb	r3, [r2, #0]
	flag.provoke = false;
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <init_flag+0x7c>)
 80022ec:	78d3      	ldrb	r3, [r2, #3]
 80022ee:	f36f 0341 	bfc	r3, #1, #1
 80022f2:	70d3      	strb	r3, [r2, #3]
	flag.mov_provoke = false;
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <init_flag+0x7c>)
 80022f6:	78d3      	ldrb	r3, [r2, #3]
 80022f8:	f36f 0382 	bfc	r3, #2, #1
 80022fc:	70d3      	strb	r3, [r2, #3]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000010c 	.word	0x2000010c

0800230c <constrain>:

uint32_t constrain (uint32_t Value, uint32_t Min, uint32_t Max){
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  return (Value < Min)? Min : (Value > Max)? Max : Value;
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d305      	bcc.n	800232c <constrain+0x20>
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4293      	cmp	r3, r2
 8002326:	bf28      	it	cs
 8002328:	4613      	movcs	r3, r2
 800232a:	e000      	b.n	800232e <constrain+0x22>
 800232c:	68bb      	ldr	r3, [r7, #8]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <Reset_Handler>:
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <LoopFillZerobss+0x12>)
 8002346:	490d      	ldr	r1, [pc, #52]	; (800237c <LoopFillZerobss+0x16>)
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <LoopFillZerobss+0x1a>)
 800234a:	2300      	movs	r3, #0
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:
 800234e:	58d4      	ldr	r4, [r2, r3]
 8002350:	50c4      	str	r4, [r0, r3]
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:
 8002354:	18c4      	adds	r4, r0, r3
 8002356:	428c      	cmp	r4, r1
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <LoopFillZerobss+0x1e>)
 800235c:	4c0a      	ldr	r4, [pc, #40]	; (8002388 <LoopFillZerobss+0x22>)
 800235e:	2300      	movs	r3, #0
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:
 8002366:	42a2      	cmp	r2, r4
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>
 800236a:	f7ff ffe5 	bl	8002338 <SystemInit>
 800236e:	f000 f80f 	bl	8002390 <__libc_init_array>
 8002372:	f7ff fa0d 	bl	8001790 <main>
 8002376:	4770      	bx	lr
 8002378:	20000000 	.word	0x20000000
 800237c:	20000008 	.word	0x20000008
 8002380:	080023f8 	.word	0x080023f8
 8002384:	20000008 	.word	0x20000008
 8002388:	20000118 	.word	0x20000118

0800238c <ADC1_2_IRQHandler>:
 800238c:	e7fe      	b.n	800238c <ADC1_2_IRQHandler>
	...

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	2600      	movs	r6, #0
 8002394:	4d0c      	ldr	r5, [pc, #48]	; (80023c8 <__libc_init_array+0x38>)
 8002396:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	f000 f81a 	bl	80023d8 <_init>
 80023a4:	2600      	movs	r6, #0
 80023a6:	4d0a      	ldr	r5, [pc, #40]	; (80023d0 <__libc_init_array+0x40>)
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <__libc_init_array+0x44>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	080023f0 	.word	0x080023f0
 80023cc:	080023f0 	.word	0x080023f0
 80023d0:	080023f0 	.word	0x080023f0
 80023d4:	080023f4 	.word	0x080023f4

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
