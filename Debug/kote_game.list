
kote_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800274c  0800274c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800274c  0800274c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800274c  0800274c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000008  0800275c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  0800275c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000212a  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ef  00000000  00000000  0002215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00022b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011523  00000000  00000000  00022f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ce1  00000000  00000000  0003444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000597f5  00000000  00000000  0003712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00090921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000980  00000000  00000000  00090974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000008 	.word	0x20000008
 800012c:	00000000 	.word	0x00000000
 8000130:	08002734 	.word	0x08002734

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000000c 	.word	0x2000000c
 800014c:	08002734 	.word	0x08002734

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_f2iz>:
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b88:	d30f      	bcc.n	8000baa <__aeabi_f2iz+0x2a>
 8000b8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_f2iz+0x30>
 8000b94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba4:	bf18      	it	ne
 8000ba6:	4240      	negne	r0, r0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr
 8000bb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bb4:	d101      	bne.n	8000bba <__aeabi_f2iz+0x3a>
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	d105      	bne.n	8000bc6 <__aeabi_f2iz+0x46>
 8000bba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bbe:	bf08      	it	eq
 8000bc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <unlook_flash>:
#define PAGE_ADR                   ((uint32_t)0x08007C00) // адрес страницы для записи
#define SIZE_DATA_FLASH            3                      // сколько переменных считать из памяти

struct _flash flash;

void unlook_flash (void) {               // последовательность для разблокировки памяти
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	  FLASH->KEYR = FLASH_KEY1;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <unlook_flash+0x18>)
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <unlook_flash+0x1c>)
 8000bd4:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000bd6:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <unlook_flash+0x18>)
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <unlook_flash+0x20>)
 8000bda:	605a      	str	r2, [r3, #4]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40022000 	.word	0x40022000
 8000be8:	45670123 	.word	0x45670123
 8000bec:	cdef89ab 	.word	0xcdef89ab

08000bf0 <erase_flash>:

void erase_flash (void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	unlook_flash ();
 8000bf4:	f7ff ffea 	bl	8000bcc <unlook_flash>
	SET_BIT(FLASH->CR, FLASH_CR_PER);     // установим бит стирания
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <erase_flash+0x5c>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <erase_flash+0x5c>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6113      	str	r3, [r2, #16]
	FLASH->AR = PAGE_ADR;                 // запишем страницу для стирания
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <erase_flash+0x5c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <erase_flash+0x60>)
 8000c08:	615a      	str	r2, [r3, #20]
	SET_BIT(FLASH->CR, FLASH_CR_STRT);    // запустим стирание
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <erase_flash+0x5c>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <erase_flash+0x5c>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	6113      	str	r3, [r2, #16]
	while (!(FLASH->SR & FLASH_SR_EOP));  //Дождемся поднятия флага о готовности
 8000c16:	bf00      	nop
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <erase_flash+0x5c>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f9      	beq.n	8000c18 <erase_flash+0x28>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);   // сбросим бит стирания
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <erase_flash+0x5c>)
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <erase_flash+0x5c>)
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	6113      	str	r3, [r2, #16]
	FLASH->SR |= FLASH_SR_EOP;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <erase_flash+0x5c>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <erase_flash+0x5c>)
 8000c36:	f043 0320 	orr.w	r3, r3, #32
 8000c3a:	60d3      	str	r3, [r2, #12]
	SET_BIT(FLASH->CR, FLASH_CR_LOCK);    // заблокируем память
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <erase_flash+0x5c>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <erase_flash+0x5c>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6113      	str	r3, [r2, #16]
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40022000 	.word	0x40022000
 8000c50:	08007c00 	.word	0x08007c00

08000c54 <devide_32_to_16>:

void devide_32_to_16 (int16_t* adr_flash, int32_t *data) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	*adr_flash =  (int16_t) *data & 0xFFFF;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	801a      	strh	r2, [r3, #0]
    adr_flash ++;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
    *adr_flash = (int16_t) (*data >> 16) & 0xFFFF;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	141b      	asrs	r3, r3, #16
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	801a      	strh	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <write_flash>:

void write_flash (void) {                // запись в флешу
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
	int32_t* point_data = &flash.gyrX_zero;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <write_flash+0x78>)
 8000c8c:	607b      	str	r3, [r7, #4]
	erase_flash ();
 8000c8e:	f7ff ffaf 	bl	8000bf0 <erase_flash>
	unlook_flash ();
 8000c92:	f7ff ff9b 	bl	8000bcc <unlook_flash>
	SET_BIT(FLASH->CR, FLASH_CR_PG);     // установим бит записи
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <write_flash+0x7c>)
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <write_flash+0x7c>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6113      	str	r3, [r2, #16]
    int16_t* adr_flash1 = (int16_t*) PAGE_ADR;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <write_flash+0x80>)
 8000ca4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SIZE_DATA_FLASH; i++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e00d      	b.n	8000cc8 <write_flash+0x44>
		devide_32_to_16 (adr_flash1, point_data + i);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff ffcc 	bl	8000c54 <devide_32_to_16>
		adr_flash1 += 2;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SIZE_DATA_FLASH; i++){
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddee      	ble.n	8000cac <write_flash+0x28>
	}
    while (!(FLASH->SR & FLASH_SR_EOP));  //Дождемся поднятия флага о готовности
 8000cce:	bf00      	nop
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <write_flash+0x7c>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f9      	beq.n	8000cd0 <write_flash+0x4c>
	CLEAR_BIT(FLASH->CR, FLASH_CR_PG);    // сбросим бит записи
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <write_flash+0x7c>)
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <write_flash+0x7c>)
 8000ce2:	f023 0301 	bic.w	r3, r3, #1
 8000ce6:	6113      	str	r3, [r2, #16]
	SET_BIT(FLASH->CR, FLASH_CR_LOCK);    // заблокируем память
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <write_flash+0x7c>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <write_flash+0x7c>)
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	6113      	str	r3, [r2, #16]
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000024 	.word	0x20000024
 8000d00:	40022000 	.word	0x40022000
 8000d04:	08007c00 	.word	0x08007c00

08000d08 <read_from_flash>:

void read_from_flash (void){                     // считать данные из флеша
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	flash.gyrX_zero = *((uint32_t*) PAGE_ADR);
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <read_from_flash+0x5c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <read_from_flash+0x60>)
 8000d14:	601a      	str	r2, [r3, #0]
	flash.gyrY_zero = *((uint32_t*) PAGE_ADR + 1);
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <read_from_flash+0x64>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <read_from_flash+0x60>)
 8000d1e:	605a      	str	r2, [r3, #4]
	flash.gyrZ_zero = *((uint32_t*) PAGE_ADR + 2);
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <read_from_flash+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <read_from_flash+0x60>)
 8000d28:	609a      	str	r2, [r3, #8]
	if (flash.gyrX_zero == 0xFFFFFFFF) flash.gyrX_zero = 0;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <read_from_flash+0x60>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d102      	bne.n	8000d3a <read_from_flash+0x32>
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <read_from_flash+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
	if (flash.gyrY_zero == 0xFFFFFFFF) flash.gyrY_zero = 0;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <read_from_flash+0x60>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d102      	bne.n	8000d4a <read_from_flash+0x42>
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <read_from_flash+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
	if (flash.gyrZ_zero == 0xFFFFFFFF) flash.gyrZ_zero = 0;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <read_from_flash+0x60>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d52:	d102      	bne.n	8000d5a <read_from_flash+0x52>
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <read_from_flash+0x60>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08007c00 	.word	0x08007c00
 8000d68:	20000024 	.word	0x20000024
 8000d6c:	08007c04 	.word	0x08007c04
 8000d70:	08007c08 	.word	0x08007c08

08000d74 <write_to_struct>:

void write_to_struct (uint32_t X, uint32_t Y, uint32_t Z) {
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	flash.gyrX_zero = X;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <write_to_struct+0x28>)
 8000d84:	6013      	str	r3, [r2, #0]
	flash.gyrY_zero = Y;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <write_to_struct+0x28>)
 8000d8a:	6053      	str	r3, [r2, #4]
	flash.gyrZ_zero = Z;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <write_to_struct+0x28>)
 8000d90:	6093      	str	r3, [r2, #8]
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000024 	.word	0x20000024

08000da0 <CMSIS_I2C_Reset>:
#include "main.h"

extern volatile uint32_t Timeout_counter_ms;


void CMSIS_I2C_Reset(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	//п.п. 26.6.1 I2C Control register 1 (I2C_CR1) (стр. 772)
	SET_BIT(I2C2->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C2->CR1, I2C_CR1_SWRST) == 0) ;
 8000db0:	bf00      	nop
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <CMSIS_I2C_Reset+0x12>
	CLEAR_BIT(I2C2->CR1, I2C_CR1_SWRST); //: I2C Peripheral not under reset
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dc8:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C2->CR1, I2C_CR1_SWRST)) ;
 8000dca:	bf00      	nop
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <CMSIS_I2C_Reset+0x44>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f9      	bne.n	8000dcc <CMSIS_I2C_Reset+0x2c>
	/* Примечание: Этот бит можно использовать для повторной инициализации
	 * периферийного устройства после ошибки или заблокированного состояния.
	 * Например, если бит BUSY установлен и остается заблокированным из-за сбоя на шине,
	 * бит SWRST можно использовать для выхода из этого состояния.*/
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40005800 	.word	0x40005800

08000de8 <CMSIS_I2C2_Init>:


void CMSIS_I2C2_Init(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	//Настройки тактирования
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирование порта B
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); //Запуск тактирования I2C1
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <CMSIS_I2C2_Init+0xcc>)
 8000e0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e0e:	61d3      	str	r3, [r2, #28]

	//Настройки ножек SDA и SCL
	//PB11 SDA (I2C Data I/O) Alternate function open drain
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF11_Msk, 0b11 << GPIO_CRH_CNF11_Pos); //Alternate function open drain
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e1a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_MODE11_Msk, 0b11 << GPIO_CRH_MODE11_Pos); //Maximum output speed 50 MHz
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e22:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e26:	6053      	str	r3, [r2, #4]
	//PB10 SCL (I2C clock) Alternate function open drain
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF10_Msk, 0b11 << GPIO_CRH_CNF10_Pos); //Alternate function open drain
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e2e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000e32:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_MODE10_Msk, 0b11 << GPIO_CRH_MODE10_Pos); //Maximum output speed 50 MHz
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <CMSIS_I2C2_Init+0xd0>)
 8000e3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e3e:	6053      	str	r3, [r2, #4]

	CMSIS_I2C_Reset();
 8000e40:	f7ff ffae 	bl	8000da0 <CMSIS_I2C_Reset>

	I2C2->CR1= 0;                            // очистим регистр
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
	I2C2->CR2=(((APB1_Clock/1000000ul)<<I2C_CR2_FREQ_Pos)&I2C_CR2_FREQ_Msk) ;// на какой скорости работает шина I2C2
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <CMSIS_I2C2_Init+0xd8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <CMSIS_I2C2_Init+0xdc>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e5c:	6053      	str	r3, [r2, #4]
	//I2C2->CCR= 0 | ((((SystemCoreClock+1000*I2C_BUS_FREQ_KHZ)/1000/I2C_BUS_FREQ_KHZ/2)<<I2C_CCR_CCR_Pos)&I2C_CCR_CCR_Msk); //скорость шины из даташита ??
	I2C2->CCR =  (APB1_Clock / (I2C_BUS_FREQ_KHZ*1000*3)) ;    //((1/(I2C_BUS_FREQ_KHZ*1000))*3/(1/SystemCoreClock));
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <CMSIS_I2C2_Init+0xd8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e64:	4918      	ldr	r1, [pc, #96]	; (8000ec8 <CMSIS_I2C2_Init+0xe0>)
 8000e66:	fba1 1303 	umull	r1, r3, r1, r3
 8000e6a:	0cdb      	lsrs	r3, r3, #19
 8000e6c:	61d3      	str	r3, [r2, #28]
	SET_BIT(I2C2->CCR, I2C_CCR_FS);           //Fast mode I2C
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e78:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(I2C2->CCR, I2C_CCR_DUTY);       //Fm mode tlow/thigh = 2
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e84:	61d3      	str	r3, [r2, #28]
	//SET_BIT(I2C2->CCR, I2C_CCR_DUTY);       //Fm mode tlow/thigh = 16/9 (see CCR)
	I2C2->TRISE=APB1_Clock/3333333ul+1;       //1000000 или 3333333 это скорость нарастания от частоты  1000нс для стандарт, 300нс для фаст (такие цифры потому что
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <CMSIS_I2C2_Init+0xd8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <CMSIS_I2C2_Init+0xe4>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	0d5b      	lsrs	r3, r3, #21
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e94:	3301      	adds	r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
	I2C2->OAR1=0 ;                            // 300нс это частота 3333333Гц, а 1000нс это 1000000Гц)
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
	I2C2->OAR2= 0;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
	SET_BIT(I2C2->CR1, I2C_CR1_PE);          // включим I2C2
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <CMSIS_I2C2_Init+0xd4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]

	//п.п. 26.6.9 I2C TRISE register (I2C_TRISE)(стр. 782)
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 37 << I2C_TRISE_TRISE_Pos); //для Sm mode
	//MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE_Msk, 12 << I2C_TRISE_TRISE_Pos); //для Fm mode

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40005800 	.word	0x40005800
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	6fd91d85 	.word	0x6fd91d85
 8000ecc:	a10fb0af 	.word	0xa10fb0af

08000ed0 <CMSIS_I2C_MemWrite>:
 *  @param  *data - Данные, которые будем записывать
 *  @param  Size_data - Размер, сколько байт будем записывать.
 *  @retval  Возвращает статус записи. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
uint8_t CMSIS_I2C_MemWrite(I2C_TypeDef *I2C, uint8_t Adress_Device, uint16_t Adress_data, uint8_t Size_adress, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	70fb      	strb	r3, [r7, #3]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	803b      	strh	r3, [r7, #0]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	70bb      	strb	r3, [r7, #2]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d02d      	beq.n	8000f52 <CMSIS_I2C_MemWrite+0x82>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR10)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR11))) {
 8000ef6:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <CMSIS_I2C_MemWrite+0x1e8>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <CMSIS_I2C_MemWrite+0x46>
 8000f02:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <CMSIS_I2C_MemWrite+0x1e8>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <CMSIS_I2C_MemWrite+0x46>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 8000f0e:	f7ff ff47 	bl	8000da0 <CMSIS_I2C_Reset>
			CMSIS_I2C2_Init(); //повторная инициализация
 8000f12:	f7ff ff69 	bl	8000de8 <CMSIS_I2C2_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <CMSIS_I2C_MemWrite+0x5e>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d00b      	beq.n	8000f4e <CMSIS_I2C_MemWrite+0x7e>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 0201 	bic.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
		}

		return false;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e0ae      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре. ??
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 8000f6a:	4a54      	ldr	r2, [pc, #336]	; (80010bc <CMSIS_I2C_MemWrite+0x1ec>)
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000f70:	e005      	b.n	8000f7e <CMSIS_I2C_MemWrite+0xae>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8000f72:	4b52      	ldr	r3, [pc, #328]	; (80010bc <CMSIS_I2C_MemWrite+0x1ec>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <CMSIS_I2C_MemWrite+0xae>
			return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e098      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f3      	beq.n	8000f72 <CMSIS_I2C_MemWrite+0xa2>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + Write
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <CMSIS_I2C_MemWrite+0x1ec>)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000f9e:	e005      	b.n	8000fac <CMSIS_I2C_MemWrite+0xdc>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <CMSIS_I2C_MemWrite+0x1ec>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <CMSIS_I2C_MemWrite+0xdc>
			return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e081      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <CMSIS_I2C_MemWrite+0xf4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0ed      	beq.n	8000fa0 <CMSIS_I2C_MemWrite+0xd0>
		}

	}
	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d068      	beq.n	80010a2 <CMSIS_I2C_MemWrite+0x1d2>
		//Если устройство отозвалось, сбросим бит ADDR
		/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]

		/*Отправим адрес памяти*/
		for (uint16_t i = 0; i < Size_adress; i++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	e028      	b.n	8001030 <CMSIS_I2C_MemWrite+0x160>
			I2C->DR = *((uint8_t*)&Adress_data + (Size_adress - 1 - i)); //Запись байта
 8000fde:	78bb      	ldrb	r3, [r7, #2]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8000ff4:	e013      	b.n	800101e <CMSIS_I2C_MemWrite+0x14e>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10d      	bne.n	800101e <CMSIS_I2C_MemWrite+0x14e>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	615a      	str	r2, [r3, #20]
					return false;
 800101a:	2300      	movs	r3, #0
 800101c:	e048      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0e5      	beq.n	8000ff6 <CMSIS_I2C_MemWrite+0x126>
		for (uint16_t i = 0; i < Size_adress; i++) {
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	3301      	adds	r3, #1
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	78bb      	ldrb	r3, [r7, #2]
 8001032:	b29b      	uxth	r3, r3
 8001034:	89fa      	ldrh	r2, [r7, #14]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3d1      	bcc.n	8000fde <CMSIS_I2C_MemWrite+0x10e>
				}
			}
		}

		/*Будем записывать данные в ячейку памяти, начиная с указанного адреса*/
		for (uint16_t i = 0; i < Size_data; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	81bb      	strh	r3, [r7, #12]
 800103e:	e024      	b.n	800108a <CMSIS_I2C_MemWrite+0x1ba>
			I2C->DR = *(data + i); //Запись байта
 8001040:	89bb      	ldrh	r3, [r7, #12]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 800104e:	e013      	b.n	8001078 <CMSIS_I2C_MemWrite+0x1a8>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10d      	bne.n	8001078 <CMSIS_I2C_MemWrite+0x1a8>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	615a      	str	r2, [r3, #20]
					return false;
 8001074:	2300      	movs	r3, #0
 8001076:	e01b      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0e5      	beq.n	8001050 <CMSIS_I2C_MemWrite+0x180>
		for (uint16_t i = 0; i < Size_data; i++) {
 8001084:	89bb      	ldrh	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	81bb      	strh	r3, [r7, #12]
 800108a:	89ba      	ldrh	r2, [r7, #12]
 800108c:	8bbb      	ldrh	r3, [r7, #28]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3d6      	bcc.n	8001040 <CMSIS_I2C_MemWrite+0x170>
				}
			}
		}

		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]

		return true;
 800109e:	2301      	movs	r3, #1
 80010a0:	e006      	b.n	80010b0 <CMSIS_I2C_MemWrite+0x1e0>

	} else {
		//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
		//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF

		return false;
 80010ae:	2300      	movs	r3, #0
	}
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	20000038 	.word	0x20000038

080010c0 <CMSIS_I2C_MemRead>:
 *  @param  *data - Данные, в которые будем записывать считанную информацию.
 *  @param  Size_data - Размер, сколько байт будем считывать.
 *  @retval  Возвращает статус считывания. True - Успешно. False - Ошибка.
 **************************************************************************************************
 */
uint8_t CMSIS_I2C_MemRead(I2C_TypeDef *I2C, uint8_t Adress_Device, uint16_t Adress_data, uint8_t Size_adress, uint8_t* data, uint16_t Size_data, uint32_t Timeout_ms) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	70fb      	strb	r3, [r7, #3]
 80010d2:	460b      	mov	r3, r1
 80010d4:	803b      	strh	r3, [r7, #0]
 80010d6:	4613      	mov	r3, r2
 80010d8:	70bb      	strb	r3, [r7, #2]

	/*-------------------Проверка занятости шины-------------------*/
	if (READ_BIT(I2C->SR2, I2C_SR2_BUSY)) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d02d      	beq.n	8001142 <CMSIS_I2C_MemRead+0x82>
		//Если шина занята

		if ((READ_BIT(GPIOB->IDR, GPIO_IDR_IDR10)) && (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR11))) {
 80010e6:	4b95      	ldr	r3, [pc, #596]	; (800133c <CMSIS_I2C_MemRead+0x27c>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <CMSIS_I2C_MemRead+0x46>
 80010f2:	4b92      	ldr	r3, [pc, #584]	; (800133c <CMSIS_I2C_MemRead+0x27c>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <CMSIS_I2C_MemRead+0x46>
			//Если линия на самом деле свободна, а BUSY висит
			CMSIS_I2C_Reset(); //ресет
 80010fe:	f7ff fe4f 	bl	8000da0 <CMSIS_I2C_Reset>
			CMSIS_I2C2_Init(); //повторная инициализация
 8001102:	f7ff fe71 	bl	8000de8 <CMSIS_I2C2_Init>
		}

		if (READ_BIT(I2C->SR2, I2C_SR2_MSL)) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <CMSIS_I2C_MemRead+0x5e>
			//Если стоит статус, что мы в мастере
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Отправим сигнал STOP
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
		}

		if (I2C->CR1 != 1) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d00b      	beq.n	800113e <CMSIS_I2C_MemRead+0x7e>
			//Если в CR1 что-то лишнее, то перезагрузим I2C
			CLEAR_BIT(I2C->CR1, I2C_CR1_PE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 0201 	bic.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	601a      	str	r2, [r3, #0]
			SET_BIT(I2C->CR1, I2C_CR1_PE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
		}

		return false;
 800113e:	2300      	movs	r3, #0
 8001140:	e107      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
	}
	/*-------------------Проверка занятости шины-------------------*/

	CLEAR_BIT(I2C->CR1, I2C_CR1_POS); //Бит ACK управляет (N)ACK текущего байта, принимаемого в сдвиговом регистре.
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]

	Timeout_counter_ms = Timeout_ms;
 800115a:	4a79      	ldr	r2, [pc, #484]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	6013      	str	r3, [r2, #0]
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 8001160:	e005      	b.n	800116e <CMSIS_I2C_MemRead+0xae>
		//Ожидаем до момента, пока не сработает Start condition generated

		if (!Timeout_counter_ms) {
 8001162:	4b77      	ldr	r3, [pc, #476]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <CMSIS_I2C_MemRead+0xae>
			return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e0f1      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
	while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f3      	beq.n	8001162 <CMSIS_I2C_MemRead+0xa2>
		}

	}
	//ВНИМАНИЕ!
	/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
	I2C->SR1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
	I2C->DR = (Adress_Device << 1); //Адрес + команда Write
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	611a      	str	r2, [r3, #16]

	Timeout_counter_ms = Timeout_ms;
 8001188:	4a6d      	ldr	r2, [pc, #436]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	6013      	str	r3, [r2, #0]
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 800118e:	e005      	b.n	800119c <CMSIS_I2C_MemRead+0xdc>
		//Ждем, пока адрес отзовется

		if (!Timeout_counter_ms) {
 8001190:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <CMSIS_I2C_MemRead+0xdc>
			return false;
 8001198:	2300      	movs	r3, #0
 800119a:	e0da      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
	while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <CMSIS_I2C_MemRead+0xf4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ed      	beq.n	8001190 <CMSIS_I2C_MemRead+0xd0>
		}

	}

	if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80c1 	beq.w	8001344 <CMSIS_I2C_MemRead+0x284>
		//Если устройство отозвалось, сбросим бит ADDR
        /*Сброс бита ADDR производится чтением SR1, а потом SR2*/
		I2C->SR1;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
		I2C->SR2;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]

		/*Отправим адрес памяти*/
		for (uint16_t i = 0; i < Size_adress; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	81fb      	strh	r3, [r7, #14]
 80011ce:	e028      	b.n	8001222 <CMSIS_I2C_MemRead+0x162>
			I2C->DR = *((uint8_t*)&Adress_data + (Size_adress - 1 - i)); //Запись байта
 80011d0:	78bb      	ldrb	r3, [r7, #2]
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	463b      	mov	r3, r7
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 80011e6:	e013      	b.n	8001210 <CMSIS_I2C_MemRead+0x150>
				//Ждем, пока данные загрузятся в регистр сдвига.

				if ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 1)) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10d      	bne.n	8001210 <CMSIS_I2C_MemRead+0x150>
					//Если устройство не отозвалось, прилетит 1 в I2C_SR1_AF
					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
					CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
					return false;
 800120c:	2300      	movs	r3, #0
 800120e:	e0a0      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
			while (READ_BIT(I2C->SR1, I2C_SR1_TXE) == 0) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0e5      	beq.n	80011e8 <CMSIS_I2C_MemRead+0x128>
		for (uint16_t i = 0; i < Size_adress; i++) {
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	3301      	adds	r3, #1
 8001220:	81fb      	strh	r3, [r7, #14]
 8001222:	78bb      	ldrb	r3, [r7, #2]
 8001224:	b29b      	uxth	r3, r3
 8001226:	89fa      	ldrh	r2, [r7, #14]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3d1      	bcc.n	80011d0 <CMSIS_I2C_MemRead+0x110>
				}
			}
		}

		//Повторный старт
		SET_BIT(I2C->CR1, I2C_CR1_START); //Стартуем.
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]

		Timeout_counter_ms = Timeout_ms;
 8001238:	4a41      	ldr	r2, [pc, #260]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	6013      	str	r3, [r2, #0]
		while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 800123e:	e005      	b.n	800124c <CMSIS_I2C_MemRead+0x18c>
			//Ожидаем до момента, пока не сработает Start condition generated

			if (!Timeout_counter_ms) {
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <CMSIS_I2C_MemRead+0x18c>
				return false;
 8001248:	2300      	movs	r3, #0
 800124a:	e082      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
		while (READ_BIT(I2C->SR1, I2C_SR1_SB) == 0) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f3      	beq.n	8001240 <CMSIS_I2C_MemRead+0x180>
			}

		}
		//ВНИМАНИЕ!
		/* Бит I2C_SR1_SB очищается программно путем чтения регистра SR1 с последующей записью в регистр DR или когда PE=0*/
		I2C->SR1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
		I2C->DR = (Adress_Device << 1 | 1); //Адрес + команда Read
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]

		Timeout_counter_ms = Timeout_ms;
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	6013      	str	r3, [r2, #0]
		while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 8001270:	e005      	b.n	800127e <CMSIS_I2C_MemRead+0x1be>
			//Ждем, пока адрес отзовется

			if (!Timeout_counter_ms) {
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <CMSIS_I2C_MemRead+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <CMSIS_I2C_MemRead+0x1be>
				return false;
 800127a:	2300      	movs	r3, #0
 800127c:	e069      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
		while ((READ_BIT(I2C->SR1, I2C_SR1_AF) == 0) && (READ_BIT(I2C->SR1, I2C_SR1_ADDR) == 0)) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <CMSIS_I2C_MemRead+0x1d6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ed      	beq.n	8001272 <CMSIS_I2C_MemRead+0x1b2>
			}

		}

		if (READ_BIT(I2C->SR1, I2C_SR1_ADDR)) {
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d043      	beq.n	800132a <CMSIS_I2C_MemRead+0x26a>
			//Если устройство отозвалось, сбросим бит ADDR
			/*Сброс бита ADDR производится чтением SR1, а потом SR2*/
			I2C->SR1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
			I2C->SR2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]

			/*Прочтем данные, начиная с указанного адреса*/
			for (uint16_t i = 0; i < Size_data; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	81bb      	strh	r3, [r7, #12]
 80012ae:	e036      	b.n	800131e <CMSIS_I2C_MemRead+0x25e>
				if (i < Size_data - 1) {
 80012b0:	89ba      	ldrh	r2, [r7, #12]
 80012b2:	8bbb      	ldrh	r3, [r7, #28]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	da14      	bge.n	80012e4 <CMSIS_I2C_MemRead+0x224>
					SET_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы хотим принять следующий байт, то отправляем ACK
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]
					while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) ;
 80012c6:	bf00      	nop
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <CMSIS_I2C_MemRead+0x208>
					*(data + i) = I2C->DR; //Чтение байта
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6919      	ldr	r1, [r3, #16]
 80012d8:	89bb      	ldrh	r3, [r7, #12]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4413      	add	r3, r2
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e019      	b.n	8001318 <CMSIS_I2C_MemRead+0x258>
				} else {
					CLEAR_BIT(I2C->CR1, I2C_CR1_ACK); //Если мы знаем, что следующий принятый байт будет последним, то отправим NACK
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]

					SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]
					while (READ_BIT(I2C->SR1, I2C_SR1_RXNE) == 0) ; //Подождем, пока сдвиговый регистр пополнится новым байтом данных
 80012fc:	bf00      	nop
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f9      	beq.n	80012fe <CMSIS_I2C_MemRead+0x23e>
					*(data + i) = I2C->DR; //Чтение байта
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4413      	add	r3, r2
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
			for (uint16_t i = 0; i < Size_data; i++) {
 8001318:	89bb      	ldrh	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	81bb      	strh	r3, [r7, #12]
 800131e:	89ba      	ldrh	r2, [r7, #12]
 8001320:	8bbb      	ldrh	r3, [r7, #28]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3c4      	bcc.n	80012b0 <CMSIS_I2C_MemRead+0x1f0>
				}
			} return true;
 8001326:	2301      	movs	r3, #1
 8001328:	e013      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>

		} else {
			//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
			SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
			//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
			return false;
 8001336:	2300      	movs	r3, #0
 8001338:	e00b      	b.n	8001352 <CMSIS_I2C_MemRead+0x292>
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00
 8001340:	20000038 	.word	0x20000038
		}

	} else {
		//Если устройство не отозвалось, прилетит 0 в I2C_SR1_ADDR
		SET_BIT(I2C->CR1, I2C_CR1_STOP); //Останавливаем
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	601a      	str	r2, [r3, #0]
		//CLEAR_BIT(I2C->SR1, I2C_SR1_AF); //Сбрасываем бит AF
		return false;
 8001350:	2300      	movs	r3, #0
	}
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4906      	ldr	r1, [pc, #24]	; (8001390 <__NVIC_EnableIRQ+0x34>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <CMSIS_RCC_SystemClock_72MHz>:
 *  В настройке также необходимо настроить FLASH на работу, совместимую с 72MHz:
 *  Reference Manual/см. п.3.2 Memory organization (стр. 49)
 ***************************************************************************************
 */

void CMSIS_RCC_SystemClock_72MHz(void) {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSION); //Запустим внутренний RC генератор на 8 МГц
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a39      	ldr	r2, [pc, #228]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0); //Дождемся поднятия флага о готовности
 80013f8:	bf00      	nop
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f9      	beq.n	80013fa <CMSIS_RCC_SystemClock_72MHz+0x12>

	SET_BIT(RCC->CR, RCC_CR_HSEON); //Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0); //Дождемся поднятия флага о готовности
 8001412:	bf00      	nop
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <CMSIS_RCC_SystemClock_72MHz+0x2c>

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSE); //Выберем HSE в качестве System Clock(PLL лучше пока не выбирать, он у нас отключен)
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 0303 	bic.w	r3, r3, #3
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6053      	str	r3, [r2, #4]
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE); //Prefetch is enabled(В Cube MX включено и я включил...)
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_1); //010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 0307 	bic.w	r3, r3, #7
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <CMSIS_RCC_SystemClock_72MHz+0xf4>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6013      	str	r3, [r2, #0]

	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1);     //APB Prescaler /1
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001456:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_DIV2);   //APB1 Prescaler /2, т.к. PCLK1 max 36MHz
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001466:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_CFGR_PPRE2_DIV1);   //APB2 Prescaler /1. Тут нас ничего не ограничивает. Будет 72MHz.
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800146e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001472:	6053      	str	r3, [r2, #4]

	CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE_HSE); //Никакое предделение перед PLL нам не нужно. Поэтому /1.
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	6053      	str	r3, [r2, #4]
	SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);         //В качестве входного сигнала для PLL выберем HSE
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMULL, RCC_CFGR_PLLMULL9); //т.к. кварц у нас 8Mhz, а нам нужно 72MHz, то в PLL нужно сделать умножение на 9. 8MHz * 9 = 72MHz.
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 8001492:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001496:	6053      	str	r3, [r2, #4]

	SET_BIT(RCC->CR, RCC_CR_CSSON);                       //Включим CSS
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 800149e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014a2:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR, RCC_CR_PLLON);                       //Запустим PLL
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80014aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0);        //Дожидемся поднятия флага включения PLL
 80014b0:	bf00      	nop
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f9      	beq.n	80014b2 <CMSIS_RCC_SystemClock_72MHz+0xca>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);  //Выберем PLL в качестве System Clock
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <CMSIS_RCC_SystemClock_72MHz+0xf0>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6053      	str	r3, [r2, #4]


	//MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, RCC_CFGR_ADCPRE_DIV6); //ADC Prescaler /6, чтоб было 12MHz, т.к. максимальная частота тут 14 MHz
    //CLEAR_BIT(RCC->CFGR, RCC_CFGR_USBPRE); //Для USB 72MHz/1.5 = 48MHz
	//MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, RCC_CFGR_MCO_PLLCLK_DIV2); //В качестве тактирования для MCO выбрал PLL. Будет 36 MHz.
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40022000 	.word	0x40022000

080014e0 <CMSIS_SysTick_Timer_init>:
 *  На этом таймере мы настроим Delay и аналог HAL_GetTick()
 *  PM0056 STM32F10xxx/20xxx/21xxx/L1xxxx Cortex®-M3 programming manual/
 *  см. п.4.5 SysTick timer (STK) (стр. 150)
 ***************************************************************************************
 */
void CMSIS_SysTick_Timer_init(void) {
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	/* п. 4.5.1 SysTick control and status register (STK_CTRL) (стр. 151)*/

	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6013      	str	r3, [r2, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 72MHz
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6013      	str	r3, [r2, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk,
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001510:	490a      	ldr	r1, [pc, #40]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <CMSIS_SysTick_Timer_init+0x60>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
			71999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk,
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <CMSIS_SysTick_Timer_init+0x60>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
			71999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 71999
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <CMSIS_SysTick_Timer_init+0x5c>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e010 	.word	0xe000e010
 8001540:	0001193f 	.word	0x0001193f

08001544 <Delay_ms>:
 ******************************************************************************
 *  @breif Delay_ms
 *  @param   uint32_t Milliseconds - Длина задержки в миллисекундах
 ******************************************************************************
 */
void Delay_ms(uint32_t Milliseconds) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <Delay_ms+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
	while (Delay_counter_ms != 0);
 8001552:	bf00      	nop
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <Delay_ms+0x24>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1fb      	bne.n	8001554 <Delay_ms+0x10>
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000034 	.word	0x20000034

0800156c <SysTick_Handler>:
 ******************************************************************************
 *  @breif Прерывание по флагу COUNTFLAG (см. п. 4.5.1 SysTick control and status register (STK_CTRL))
 *  Список векторов(прерываний) можно найти в файле startup_stm32f103c8tx.S
 ******************************************************************************
 */
void SysTick_Handler(void) {
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <SysTick_Handler+0xbc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <SysTick_Handler+0xbc>)
 8001578:	6013      	str	r3, [r2, #0]

	if (Delay_counter_ms)       Delay_counter_ms--;      // задеркжка
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <SysTick_Handler+0xc0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <SysTick_Handler+0x20>
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <SysTick_Handler+0xc0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a28      	ldr	r2, [pc, #160]	; (800162c <SysTick_Handler+0xc0>)
 800158a:	6013      	str	r3, [r2, #0]
	if (Timeout_counter_ms)	    Timeout_counter_ms--;    // максимальное время опроса датчика
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <SysTick_Handler+0xc4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <SysTick_Handler+0x32>
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <SysTick_Handler+0xc4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <SysTick_Handler+0xc4>)
 800159c:	6013      	str	r3, [r2, #0]
	if (time_game )             time_game --;            // время до конца игры
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <SysTick_Handler+0xc8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <SysTick_Handler+0x44>
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SysTick_Handler+0xc8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <SysTick_Handler+0xc8>)
 80015ae:	6013      	str	r3, [r2, #0]
	if (time_game == 1)         flag.time_of = true;     // чтоб остановить игру 1 раз, так как если будет 0 останавливать будет каждый раз
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <SysTick_Handler+0xc8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d104      	bne.n	80015c2 <SysTick_Handler+0x56>
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <SysTick_Handler+0xcc>)
 80015ba:	7813      	ldrb	r3, [r2, #0]
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	7013      	strb	r3, [r2, #0]
	if (flag.start_polling)     flag.start_polling --;   // старт опроса, циклично запускать
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <SysTick_Handler+0xcc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f023 0303 	bic.w	r3, r3, #3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <SysTick_Handler+0x80>
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <SysTick_Handler+0xcc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	333f      	adds	r3, #63	; 0x3f
 80015dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <SysTick_Handler+0xcc>)
 80015e4:	7813      	ldrb	r3, [r2, #0]
 80015e6:	f361 0387 	bfi	r3, r1, #2, #6
 80015ea:	7013      	strb	r3, [r2, #0]
	if (time_to_next_game)      time_to_next_game --;    // время для паузы между играми
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <SysTick_Handler+0xd0>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <SysTick_Handler+0x94>
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <SysTick_Handler+0xd0>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <SysTick_Handler+0xd0>)
 80015fe:	801a      	strh	r2, [r3, #0]
	if (provoke)                provoke --;              // провокация)
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <SysTick_Handler+0xd4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <SysTick_Handler+0xaa>
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <SysTick_Handler+0xd4>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <SysTick_Handler+0xd4>)
 8001612:	801a      	strh	r2, [r3, #0]
    		treck_go (flag.sound);
    	}
	}*/


}
 8001614:	e004      	b.n	8001620 <SysTick_Handler+0xb4>
	else flag.mov_provoke       = true;
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <SysTick_Handler+0xcc>)
 8001618:	78d3      	ldrb	r3, [r2, #3]
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	70d3      	strb	r3, [r2, #3]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000030 	.word	0x20000030
 800162c:	20000034 	.word	0x20000034
 8001630:	20000038 	.word	0x20000038
 8001634:	2000003c 	.word	0x2000003c
 8001638:	20000080 	.word	0x20000080
 800163c:	20000042 	.word	0x20000042
 8001640:	20000044 	.word	0x20000044

08001644 <CMSIS_PC13_OUTPUT_Push_Pull_init>:
 *  @breif Инициализация PIN PC13 на выход в режиме Push-Pull с максимальной скоростью 50 MHz
 *  Reference Manual/см. п.9.2 GPIO registers (стр. 171)
 *  Перед настройкой (GPIOs and AFIOs) нужно включить тактирование порта.
 ***************************************************************************************
 */
void CMSIS_PC13_OUTPUT_Push_Pull_init(void) {
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN); //Запуск тактирования порта C
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x6c>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_MODE13, 0b11 << GPIO_CRH_MODE13_Pos); //Настройка GPIOC порта 13 на выход со максимальной скоростью в 50 MHz
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 8001666:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800166a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13, 0b00 << GPIO_CRH_CNF13_Pos); //Настройка GPIOC порта 13 на выход в режиме Push-Pull
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x70>)
 8001672:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001676:	6053      	str	r3, [r2, #4]

	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE1, 0b11 << GPIO_CRL_MODE1_Pos); //Настройка GPIOB порта 1 на выход со максимальной скоростью в 50 MHz
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 800167e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001682:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF1, 0b00 << GPIO_CRL_CNF1_Pos); //Настройка GPIOB порта 1 на выход в режиме Push-Pull
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 800168a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800168e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_MODE0, 0b11 << GPIO_CRL_MODE0_Pos); //Настройка GPIOB порта 0 на выход со максимальной скоростью в 50 MHz
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 8001696:	f043 0303 	orr.w	r3, r3, #3
 800169a:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF0, 0b00 << GPIO_CRL_CNF0_Pos); //Настройка GPIOB порта 0 на выход в режиме Push-Pull
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <CMSIS_PC13_OUTPUT_Push_Pull_init+0x74>)
 80016a2:	f023 030c 	bic.w	r3, r3, #12
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010c00 	.word	0x40010c00

080016bc <CMSIS_B12_Input_init>:

void CMSIS_B12_Input_init(void) {
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPBEN); //Запуск тактирования порта B
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <CMSIS_B12_Input_init+0x34>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <CMSIS_B12_Input_init+0x34>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF12, 0b01 << GPIO_CRH_CNF12_Pos); //Настройка GPIOB порта 13 на вход
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <CMSIS_B12_Input_init+0x38>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <CMSIS_B12_Input_init+0x38>)
 80016d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016da:	6053      	str	r3, [r2, #4]
	SET_BIT(GPIOB -> BSRR, GPIO_BSRR_BS12);    // подтяжка к пул ап
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <CMSIS_B12_Input_init+0x38>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <CMSIS_B12_Input_init+0x38>)
 80016e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e6:	6113      	str	r3, [r2, #16]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010c00 	.word	0x40010c00

080016f8 <PWM_Out>:

void PWM_Out (void) {                            // настроим ШИМ
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_AFIOEN); //Запуск тактирования альтернативных функций
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <PWM_Out+0xb0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <PWM_Out+0xb0>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6193      	str	r3, [r2, #24]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN); //Запуск тактирования порта A
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <PWM_Out+0xb0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <PWM_Out+0xb0>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE8, 0b11 << GPIO_CRH_MODE8_Pos); //Настройка GPIOA порта 8 на выход со максимальной скоростью в 50 MHz
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <PWM_Out+0xb4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <PWM_Out+0xb4>)
 800171a:	f043 0303 	orr.w	r3, r3, #3
 800171e:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF8, 0b10 << GPIO_CRH_CNF8_Pos); //Настройка GPIOA порта 8 на выход в режиме Push-Pull
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <PWM_Out+0xb4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 030c 	bic.w	r3, r3, #12
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <PWM_Out+0xb4>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE9, 0b11 << GPIO_CRH_MODE9_Pos); //Настройка GPIOA порта 9 на выход со максимальной скоростью в 50 MHz
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <PWM_Out+0xb4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <PWM_Out+0xb4>)
 8001736:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800173a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9, 0b10 << GPIO_CRH_CNF9_Pos); //Настройка GPIOA порта 9 на выход в режиме Push-Pull
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <PWM_Out+0xb4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <PWM_Out+0xb4>)
 8001746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174a:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE10, 0b11 << GPIO_CRH_MODE10_Pos); //Настройка GPIOA порта 10 на выход со максимальной скоростью в 50 MHz
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <PWM_Out+0xb4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <PWM_Out+0xb4>)
 8001752:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001756:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10, 0b10 << GPIO_CRH_CNF10_Pos); //Настройка GPIOA порта 10 на выход в режиме Push-Pull
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <PWM_Out+0xb4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <PWM_Out+0xb4>)
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_MODE11, 0b11 << GPIO_CRH_MODE11_Pos); //Настройка GPIOA порта 11 на выход со максимальной скоростью в 50 MHz
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <PWM_Out+0xb4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <PWM_Out+0xb4>)
 800176e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001772:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF11, 0b10 << GPIO_CRH_CNF11_Pos); //Настройка GPIOA порта 11 на выход в режиме Push-Pull
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <PWM_Out+0xb4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <PWM_Out+0xb4>)
 800177e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001782:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_MODE0, 0b11 << GPIO_CRL_MODE0_Pos); //Настройка GPIOA порта 0 на выход со максимальной скоростью в 50 MHz
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <PWM_Out+0xb4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <PWM_Out+0xb4>)
 800178a:	f043 0303 	orr.w	r3, r3, #3
 800178e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF0, 0b10 << GPIO_CRL_CNF0_Pos); //Настройка GPIOA порта 0 на выход в режиме Push-Pull
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <PWM_Out+0xb4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 030c 	bic.w	r3, r3, #12
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <PWM_Out+0xb4>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <Tim1_init>:

void Tim1_init (void) {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //Запуск тактирования TIM1
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <Tim1_init+0xb8>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <Tim1_init+0xb8>)
 80017ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017be:	6193      	str	r3, [r2, #24]
	TIM1->PSC = 20;    //делитель
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <Tim1_init+0xbc>)
 80017c2:	2214      	movs	r2, #20
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1000;  //значение перезагрузки
 80017c6:	4b29      	ldr	r3, [pc, #164]	; (800186c <Tim1_init+0xbc>)
 80017c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->BDTR |= TIM_BDTR_MOE;          //разрешим использовать выводы таймера как выходы
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <Tim1_init+0xbc>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <Tim1_init+0xbc>)
 80017d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44

	SET_BIT(TIM1->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);   //PWM mode 1
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <Tim1_init+0xbc>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <Tim1_init+0xbc>)
 80017e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e4:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM1->CCMR1, 0b110 << TIM_CCMR1_OC2M_Pos);   //PWM mode 1
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <Tim1_init+0xbc>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <Tim1_init+0xbc>)
 80017ec:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80017f0:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM1->CCMR2, 0b110 << TIM_CCMR2_OC3M_Pos);   //PWM mode 1
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <Tim1_init+0xbc>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <Tim1_init+0xbc>)
 80017f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017fc:	61d3      	str	r3, [r2, #28]
	SET_BIT(TIM1->CCMR2, 0b110 << TIM_CCMR2_OC4M_Pos);   //PWM mode 1
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <Tim1_init+0xbc>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <Tim1_init+0xbc>)
 8001804:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001808:	61d3      	str	r3, [r2, #28]

	SET_BIT(TIM1->CCER, TIM_CCER_CC1E);  //настроим на выход канал 1
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <Tim1_init+0xbc>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <Tim1_init+0xbc>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC2E);  //настроим на выход канал 2
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <Tim1_init+0xbc>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <Tim1_init+0xbc>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC3E);  //настроим на выход канал 3
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <Tim1_init+0xbc>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <Tim1_init+0xbc>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM1->CCER, TIM_CCER_CC4E);  //настроим на выход канал 4
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <Tim1_init+0xbc>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <Tim1_init+0xbc>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6213      	str	r3, [r2, #32]

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);     //включаем счётчик
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <Tim1_init+0xbc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <Tim1_init+0xbc>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]

	TIM1->CCR1 = 0;  //коэф. заполнения 1
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <Tim1_init+0xbc>)
 8001848:	2200      	movs	r2, #0
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;  //коэф. заполнения 2
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <Tim1_init+0xbc>)
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;  //коэф. заполнения 3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <Tim1_init+0xbc>)
 8001854:	2200      	movs	r2, #0
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;  //коэф. заполнения 4
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <Tim1_init+0xbc>)
 800185a:	2200      	movs	r2, #0
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40012c00 	.word	0x40012c00

08001870 <Tim3_init>:

void Tim3_init (void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);     //Запуск тактирования TIM3
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <Tim3_init+0x48>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <Tim3_init+0x48>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = 10;                               //делитель
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Tim3_init+0x4c>)
 8001882:	220a      	movs	r2, #10
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000;                              //значение перезагрузки
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <Tim3_init+0x4c>)
 8001888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM3->DIER, TIM_DIER_UIE);             // прерывание по переполнению
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <Tim3_init+0x4c>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <Tim3_init+0x4c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	60d3      	str	r3, [r2, #12]
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);               //включаем счётчик
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <Tim3_init+0x4c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <Tim3_init+0x4c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);                     //Включим прерывания по TIM3
 80018a6:	201d      	movs	r0, #29
 80018a8:	f7ff fd58 	bl	800135c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);                // выставим приоритет
 80018ac:	2101      	movs	r1, #1
 80018ae:	201d      	movs	r0, #29
 80018b0:	f7ff fd70 	bl	8001394 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40000400 	.word	0x40000400

080018c0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM3->SR, TIM_SR_UIF);               // сбросим флаг прерывания
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <TIM3_IRQHandler+0x44>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <TIM3_IRQHandler+0x44>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6113      	str	r3, [r2, #16]
    if (over_locking_time)      over_locking_time --;    // для разгона/торможения
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <TIM3_IRQHandler+0x48>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <TIM3_IRQHandler+0x2a>
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <TIM3_IRQHandler+0x48>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <TIM3_IRQHandler+0x48>)
 80018e6:	801a      	strh	r2, [r3, #0]
    else {over_locking_time = MAX_SPEED; flag.change_PWM = true;}
}
 80018e8:	e007      	b.n	80018fa <TIM3_IRQHandler+0x3a>
    else {over_locking_time = MAX_SPEED; flag.change_PWM = true;}
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <TIM3_IRQHandler+0x48>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	801a      	strh	r2, [r3, #0]
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <TIM3_IRQHandler+0x4c>)
 80018f2:	7893      	ldrb	r3, [r2, #2]
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	7093      	strb	r3, [r2, #2]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40000400 	.word	0x40000400
 8001908:	20000040 	.word	0x20000040
 800190c:	20000080 	.word	0x20000080

08001910 <Tim2_init>:

void Tim2_init (void) {
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);     //Запуск тактирования TIM2
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <Tim2_init+0x70>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <Tim2_init+0x70>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 10;                                 //делитель
 8001920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001924:	220a      	movs	r2, #10
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;                               //значение перезагрузки
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->BDTR |= TIM_BDTR_MOE;                    //разрешим использовать выводы таймера как выходы
 8001930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193e:	6453      	str	r3, [r2, #68]	; 0x44
	SET_BIT(TIM2->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);   //PWM mode 1
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194e:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCER, TIM_CCER_CC1E);                  //настроим на выход канал 1
 8001950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN);                     //включаем счётчик
 8001960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]


	TIM2->CCR1 = 0;  //коэф. заполнения 1
 8001970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000

08001984 <init_MPU6050>:
uint8_t MPU6050_rx_buf [16];

uint8_t setting_comand = 0;
uint8_t* setting = &setting_comand;

void init_MPU6050 (void){
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af04      	add	r7, sp, #16
	setting_comand = 0;
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <init_MPU6050+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, PWR_MGMT_1, 1, setting, 1, 100);   //выведем из сна
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <init_MPU6050+0xa8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2264      	movs	r2, #100	; 0x64
 8001996:	9202      	str	r2, [sp, #8]
 8001998:	2201      	movs	r2, #1
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	226b      	movs	r2, #107	; 0x6b
 80019a2:	2168      	movs	r1, #104	; 0x68
 80019a4:	4822      	ldr	r0, [pc, #136]	; (8001a30 <init_MPU6050+0xac>)
 80019a6:	f7ff fa93 	bl	8000ed0 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 80019aa:	200a      	movs	r0, #10
 80019ac:	f7ff fdca 	bl	8001544 <Delay_ms>
	setting_comand = 0x04;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <init_MPU6050+0xa4>)
 80019b2:	2204      	movs	r2, #4
 80019b4:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, INT_PIN_CFG, 1, setting, 1, 100);  // пин прерывания включить
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <init_MPU6050+0xa8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2264      	movs	r2, #100	; 0x64
 80019bc:	9202      	str	r2, [sp, #8]
 80019be:	2201      	movs	r2, #1
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	2237      	movs	r2, #55	; 0x37
 80019c8:	2168      	movs	r1, #104	; 0x68
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <init_MPU6050+0xac>)
 80019cc:	f7ff fa80 	bl	8000ed0 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 80019d0:	200a      	movs	r0, #10
 80019d2:	f7ff fdb7 	bl	8001544 <Delay_ms>
	setting_comand = 0x01;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <init_MPU6050+0xa4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, INT_ENABLE, 1, setting, 1, 100);   // разрешить прерывания по новым данным
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <init_MPU6050+0xa8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	9202      	str	r2, [sp, #8]
 80019e4:	2201      	movs	r2, #1
 80019e6:	9201      	str	r2, [sp, #4]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	2238      	movs	r2, #56	; 0x38
 80019ee:	2168      	movs	r1, #104	; 0x68
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <init_MPU6050+0xac>)
 80019f2:	f7ff fa6d 	bl	8000ed0 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 80019f6:	200a      	movs	r0, #10
 80019f8:	f7ff fda4 	bl	8001544 <Delay_ms>
	setting_comand = 0x07;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <init_MPU6050+0xa4>)
 80019fe:	2207      	movs	r2, #7
 8001a00:	701a      	strb	r2, [r3, #0]
	CMSIS_I2C_MemWrite (I2C2, ADR_MPU6050, SMPLRT_DIV, 1, setting, 1, 100);   // делитель сэмплов
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <init_MPU6050+0xa8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2264      	movs	r2, #100	; 0x64
 8001a08:	9202      	str	r2, [sp, #8]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	9201      	str	r2, [sp, #4]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	2219      	movs	r2, #25
 8001a14:	2168      	movs	r1, #104	; 0x68
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <init_MPU6050+0xac>)
 8001a18:	f7ff fa5a 	bl	8000ed0 <CMSIS_I2C_MemWrite>
	Delay_ms (10);
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f7ff fd91 	bl	8001544 <Delay_ms>

}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000070 	.word	0x20000070
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	40005800 	.word	0x40005800

08001a34 <read_data_MPU6050>:

void read_data_MPU6050 (void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af04      	add	r7, sp, #16
	CMSIS_I2C_MemRead (I2C2, ADR_MPU6050, 0x3B, 1, MPU6050_rx_buf, 14, 100 );
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	230e      	movs	r3, #14
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <read_data_MPU6050+0x24>)
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	223b      	movs	r2, #59	; 0x3b
 8001a4a:	2168      	movs	r1, #104	; 0x68
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <read_data_MPU6050+0x28>)
 8001a4e:	f7ff fb37 	bl	80010c0 <CMSIS_I2C_MemRead>
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000060 	.word	0x20000060
 8001a5c:	40005800 	.word	0x40005800

08001a60 <parsing_MPU6050>:

void parsing_MPU6050 (void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	int16_t full_scale;
	full_scale = MPU6050_rx_buf [0];
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [1]; //* (data + 1);
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	80fb      	strh	r3, [r7, #6]
	accX_f = (float) full_scale / 32768 * 2;
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fe61 	bl	800074c <__aeabi_i2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe ff63 	bl	800095c <__aeabi_fdiv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fda2 	bl	80005e4 <__addsf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <parsing_MPU6050+0x1a0>)
 8001aa6:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [2];
 8001aa8:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001aaa:	789b      	ldrb	r3, [r3, #2]
 8001aac:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [3]; //* (data + 1);
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001ab8:	78db      	ldrb	r3, [r3, #3]
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
	accY_f = (float) full_scale / 32768 * 2;
 8001ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fe40 	bl	800074c <__aeabi_i2f>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff42 	bl	800095c <__aeabi_fdiv>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd81 	bl	80005e4 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <parsing_MPU6050+0x1a4>)
 8001ae8:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [4];
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [5]; //* (data + 1);
 8001af8:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001afa:	795b      	ldrb	r3, [r3, #5]
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
	accZ_f = (float) full_scale / 32768 * 2;
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fe1f 	bl	800074c <__aeabi_i2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe ff21 	bl	800095c <__aeabi_fdiv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd60 	bl	80005e4 <__addsf3>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <parsing_MPU6050+0x1a8>)
 8001b2a:	601a      	str	r2, [r3, #0]
	//printf ("X_ax = %d\r\n", (int)accX_f);

	full_scale = MPU6050_rx_buf [8];
 8001b2c:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001b2e:	7a1b      	ldrb	r3, [r3, #8]
 8001b30:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [9]; //* (data + 1);
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001b3c:	7a5b      	ldrb	r3, [r3, #9]
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
	gyrX_f = (float) full_scale / 32768 * 250;
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fdfe 	bl	800074c <__aeabi_i2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe ff00 	bl	800095c <__aeabi_fdiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	492b      	ldr	r1, [pc, #172]	; (8001c0c <parsing_MPU6050+0x1ac>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fe47 	bl	80007f4 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <parsing_MPU6050+0x1b0>)
 8001b6c:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [10];
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001b70:	7a9b      	ldrb	r3, [r3, #10]
 8001b72:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [11]; //* (data + 1);
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001b7e:	7adb      	ldrb	r3, [r3, #11]
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	80fb      	strh	r3, [r7, #6]
	gyrY_f = (float) full_scale / 32768 * 250;
 8001b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fddd 	bl	800074c <__aeabi_i2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fedf 	bl	800095c <__aeabi_fdiv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	491a      	ldr	r1, [pc, #104]	; (8001c0c <parsing_MPU6050+0x1ac>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fe26 	bl	80007f4 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <parsing_MPU6050+0x1b4>)
 8001bae:	601a      	str	r2, [r3, #0]

	full_scale = MPU6050_rx_buf [12];
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	80fb      	strh	r3, [r7, #6]
	full_scale = full_scale << 8;
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	80fb      	strh	r3, [r7, #6]
	full_scale |= MPU6050_rx_buf [13]; //* (data + 1);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <parsing_MPU6050+0x19c>)
 8001bc0:	7b5b      	ldrb	r3, [r3, #13]
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
	gyrZ_f = (float) full_scale / 32768 * 250;
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fdbc 	bl	800074c <__aeabi_i2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe febe 	bl	800095c <__aeabi_fdiv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <parsing_MPU6050+0x1ac>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fe05 	bl	80007f4 <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <parsing_MPU6050+0x1b8>)
 8001bf0:	601a      	str	r2, [r3, #0]

}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000060 	.word	0x20000060
 8001c00:	20000048 	.word	0x20000048
 8001c04:	2000004c 	.word	0x2000004c
 8001c08:	20000050 	.word	0x20000050
 8001c0c:	437a0000 	.word	0x437a0000
 8001c10:	20000054 	.word	0x20000054
 8001c14:	20000058 	.word	0x20000058
 8001c18:	2000005c 	.word	0x2000005c

08001c1c <main>:
uint16_t  chanel_A = 0;        // установка шима
uint16_t  chanel_B = 0;
uint16_t  chanel_C = 0;
uint16_t  chanel_D = 0;

int main(void) {
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

	CMSIS_RCC_SystemClock_72MHz();           // инит тактирование
 8001c20:	f7ff fbe2 	bl	80013e8 <CMSIS_RCC_SystemClock_72MHz>
	CMSIS_SysTick_Timer_init();              // инит сис тик
 8001c24:	f7ff fc5c 	bl	80014e0 <CMSIS_SysTick_Timer_init>
	CMSIS_PC13_OUTPUT_Push_Pull_init();      // инит выходов
 8001c28:	f7ff fd0c 	bl	8001644 <CMSIS_PC13_OUTPUT_Push_Pull_init>
	CMSIS_B12_Input_init();                  // пин на вход
 8001c2c:	f7ff fd46 	bl	80016bc <CMSIS_B12_Input_init>
	Delay_ms(10);
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7ff fc87 	bl	8001544 <Delay_ms>
	CMSIS_I2C2_Init();                       // инит И2С
 8001c36:	f7ff f8d7 	bl	8000de8 <CMSIS_I2C2_Init>
	init_MPU6050();                          // настройка гиро
 8001c3a:	f7ff fea3 	bl	8001984 <init_MPU6050>
	PWM_Out();                               // настройка ШИМ выводов
 8001c3e:	f7ff fd5b 	bl	80016f8 <PWM_Out>
	Tim1_init();                             // инит таймеров
 8001c42:	f7ff fdb5 	bl	80017b0 <Tim1_init>
	Tim2_init();
 8001c46:	f7ff fe63 	bl	8001910 <Tim2_init>
	Tim3_init();
 8001c4a:	f7ff fe11 	bl	8001870 <Tim3_init>
	init_flag ();                            // сброс флагов в ноль
 8001c4e:	f000 fccb 	bl	80025e8 <init_flag>
	start ();                                // моргаем лампами
 8001c52:	f000 fbaf 	bl	80023b4 <start>
    if (!ZERO_PROGRAM) {                     // калибровка нуля
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <main+0x13c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11e      	bne.n	8001ca0 <main+0x84>
		read_data_MPU6050();                 // читаем данные с модуля
 8001c62:	f7ff fee7 	bl	8001a34 <read_data_MPU6050>
		parsing_MPU6050();                   // расбрасываем их в флоаты
 8001c66:	f7ff fefb 	bl	8001a60 <parsing_MPU6050>
		write_to_struct ((int32_t)gyrX_f, (int32_t)gyrY_f, (int32_t)gyrZ_f);
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <main+0x140>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ff86 	bl	8000b80 <__aeabi_f2iz>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461c      	mov	r4, r3
 8001c78:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <main+0x144>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe ff7f 	bl	8000b80 <__aeabi_f2iz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461d      	mov	r5, r3
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <main+0x148>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ff78 	bl	8000b80 <__aeabi_f2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4629      	mov	r1, r5
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff f86c 	bl	8000d74 <write_to_struct>
		write_flash ();
 8001c9c:	f7fe fff2 	bl	8000c84 <write_flash>
    }
    Delay_ms(10);
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f7ff fc4f 	bl	8001544 <Delay_ms>
    read_from_flash ();                      // читаем из памяти
 8001ca6:	f7ff f82f 	bl	8000d08 <read_from_flash>
	//JoyToTheWorld ();

	for (;;) {
		if (!flag.start_polling) {           // задержка опроса, заходим только когда время выйдет
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <main+0x14c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <main+0xb8>
			read_data_MPU6050();             // читаем данные с модуля
 8001cb8:	f7ff febc 	bl	8001a34 <read_data_MPU6050>
			parsing_MPU6050();               // расбрасываем их в флоаты
 8001cbc:	f7ff fed0 	bl	8001a60 <parsing_MPU6050>
			flag.start_polling = POLLING_TIME;  // устанавливаем новое время для опроса
 8001cc0:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <main+0x14c>)
 8001cc2:	7813      	ldrb	r3, [r2, #0]
 8001cc4:	2132      	movs	r1, #50	; 0x32
 8001cc6:	f361 0387 	bfi	r3, r1, #2, #6
 8001cca:	7013      	strb	r3, [r2, #0]
			check_new_game();                // проверяем не начать ли нам новую игру
 8001ccc:	f000 f9d4 	bl	8002078 <check_new_game>
			check_let ();
 8001cd0:	f000 fafe 	bl	80022d0 <check_let>
		}
		if (flag.time_of) {                  // это штука чтоб остановить игру один раз
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <main+0x14c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <main+0xd4>
			flag.time_of = false;            // вот этим флагом
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <main+0x14c>)
 8001ce4:	7813      	ldrb	r3, [r2, #0]
 8001ce6:	f36f 0341 	bfc	r3, #1, #1
 8001cea:	7013      	strb	r3, [r2, #0]
			stop_game();                     // останавливаем игру
 8001cec:	f000 f93e 	bl	8001f6c <stop_game>
		}
		if (flag.change_PWM) {               // это плавное нарастание шим, заходим сюда через какое то время, но если мы уже разогнались то ничего неделает
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <main+0x14c>)
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <main+0xf4>
			overclocking_PWM ();             // разгон
 8001cfe:	f000 f837 	bl	8001d70 <overclocking_PWM>
			braking_PWM ();                  // торможение
 8001d02:	f000 f897 	bl	8001e34 <braking_PWM>
			flag.change_PWM = false;         // сбросим флаг, до дальнейшего истечения времени
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <main+0x14c>)
 8001d08:	7893      	ldrb	r3, [r2, #2]
 8001d0a:	f36f 1304 	bfc	r3, #4, #1
 8001d0e:	7093      	strb	r3, [r2, #2]
		}
		if (flag.provoke) {                  // если поднят флаг провокаций
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <main+0x14c>)
 8001d12:	78db      	ldrb	r3, [r3, #3]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0c5      	beq.n	8001caa <main+0x8e>
			if (flag.mov_provoke) {          // ждем флаг что можно двигать
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <main+0x14c>)
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0be      	beq.n	8001caa <main+0x8e>
				flag.mov_provoke = false;
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <main+0x14c>)
 8001d2e:	78d3      	ldrb	r3, [r2, #3]
 8001d30:	f36f 0382 	bfc	r3, #2, #1
 8001d34:	70d3      	strb	r3, [r2, #3]
				flag.start_game = true;      // поднимаем флаг игры
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <main+0x14c>)
 8001d38:	7813      	ldrb	r3, [r2, #0]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	7013      	strb	r3, [r2, #0]
				game(SysTimer_ms);           // запускаем игру
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <main+0x150>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fb6f 	bl	8002428 <game>
				flag.repleys_game = 3;       // с тремя повторениями
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <main+0x14c>)
 8001d4c:	7853      	ldrb	r3, [r2, #1]
 8001d4e:	2103      	movs	r1, #3
 8001d50:	f361 0305 	bfi	r3, r1, #0, #6
 8001d54:	7053      	strb	r3, [r2, #1]
		if (!flag.start_polling) {           // задержка опроса, заходим только когда время выйдет
 8001d56:	e7a8      	b.n	8001caa <main+0x8e>
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	20000054 	.word	0x20000054
 8001d60:	20000058 	.word	0x20000058
 8001d64:	2000005c 	.word	0x2000005c
 8001d68:	20000080 	.word	0x20000080
 8001d6c:	20000030 	.word	0x20000030

08001d70 <overclocking_PWM>:

		}
	}
}

void overclocking_PWM (void) {               // разгон
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
	if (flag.overlocking) {                  // если включен разгон
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <overclocking_PWM+0xac>)
 8001d78:	789b      	ldrb	r3, [r3, #2]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d045      	beq.n	8001e10 <overclocking_PWM+0xa0>
		uint8_t stop_overlocking = 0;        // временная переменная
 8001d84:	2300      	movs	r3, #0
 8001d86:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR1 < chanel_A) TIM1->CCR1 += 1; else stop_overlocking ++;   // если еще не разогнались разгоняемся
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <overclocking_PWM+0xb0>)
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <overclocking_PWM+0xb4>)
 8001d8e:	8812      	ldrh	r2, [r2, #0]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d205      	bcs.n	8001da0 <overclocking_PWM+0x30>
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <overclocking_PWM+0xb0>)
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <overclocking_PWM+0xb0>)
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001d9e:	e002      	b.n	8001da6 <overclocking_PWM+0x36>
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	3301      	adds	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR2 < chanel_B) TIM1->CCR2 += 1; else stop_overlocking ++;   // если же разогнались плюсуем переменную чтоб остановить разгон
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <overclocking_PWM+0xb0>)
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <overclocking_PWM+0xb8>)
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d205      	bcs.n	8001dbe <overclocking_PWM+0x4e>
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <overclocking_PWM+0xb0>)
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <overclocking_PWM+0xb0>)
 8001db8:	3301      	adds	r3, #1
 8001dba:	6393      	str	r3, [r2, #56]	; 0x38
 8001dbc:	e002      	b.n	8001dc4 <overclocking_PWM+0x54>
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR3 < chanel_C) TIM1->CCR3 += 1; else stop_overlocking ++;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <overclocking_PWM+0xb0>)
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <overclocking_PWM+0xbc>)
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d205      	bcs.n	8001ddc <overclocking_PWM+0x6c>
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <overclocking_PWM+0xb0>)
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <overclocking_PWM+0xb0>)
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001dda:	e002      	b.n	8001de2 <overclocking_PWM+0x72>
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	3301      	adds	r3, #1
 8001de0:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR4 < chanel_D) TIM1->CCR4 += 1; else stop_overlocking ++;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <overclocking_PWM+0xb0>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <overclocking_PWM+0xc0>)
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d205      	bcs.n	8001dfa <overclocking_PWM+0x8a>
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <overclocking_PWM+0xb0>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <overclocking_PWM+0xb0>)
 8001df4:	3301      	adds	r3, #1
 8001df6:	6413      	str	r3, [r2, #64]	; 0x40
 8001df8:	e002      	b.n	8001e00 <overclocking_PWM+0x90>
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
		if (stop_overlocking == 4) {flag.overlocking = false; }                 // если все 4 уже разогнались тормозим
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d104      	bne.n	8001e10 <overclocking_PWM+0xa0>
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <overclocking_PWM+0xac>)
 8001e08:	7893      	ldrb	r3, [r2, #2]
 8001e0a:	f36f 0382 	bfc	r3, #2, #1
 8001e0e:	7093      	strb	r3, [r2, #2]
	}
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000080 	.word	0x20000080
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	20000084 	.word	0x20000084
 8001e28:	20000086 	.word	0x20000086
 8001e2c:	20000088 	.word	0x20000088
 8001e30:	2000008a 	.word	0x2000008a

08001e34 <braking_PWM>:

void braking_PWM (void) {                    // торможение. аналогично разгону
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
	if (flag.braking) {
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <braking_PWM+0xcc>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d056      	beq.n	8001ef6 <braking_PWM+0xc2>
		uint8_t stop_braking = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR1 > chanel_A) TIM1->CCR1 -= 1; else stop_braking ++;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <braking_PWM+0xd0>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	4a2d      	ldr	r2, [pc, #180]	; (8001f08 <braking_PWM+0xd4>)
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d905      	bls.n	8001e64 <braking_PWM+0x30>
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <braking_PWM+0xd0>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <braking_PWM+0xd0>)
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6353      	str	r3, [r2, #52]	; 0x34
 8001e62:	e002      	b.n	8001e6a <braking_PWM+0x36>
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	3301      	adds	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR2 > chanel_B) TIM1->CCR2 -= 1; else stop_braking ++;
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <braking_PWM+0xd0>)
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <braking_PWM+0xd8>)
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d905      	bls.n	8001e82 <braking_PWM+0x4e>
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <braking_PWM+0xd0>)
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <braking_PWM+0xd0>)
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	6393      	str	r3, [r2, #56]	; 0x38
 8001e80:	e002      	b.n	8001e88 <braking_PWM+0x54>
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	3301      	adds	r3, #1
 8001e86:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR3 > chanel_C) TIM1->CCR3 -= 1; else stop_braking ++;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <braking_PWM+0xd0>)
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <braking_PWM+0xdc>)
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d905      	bls.n	8001ea0 <braking_PWM+0x6c>
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <braking_PWM+0xd0>)
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <braking_PWM+0xd0>)
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001e9e:	e002      	b.n	8001ea6 <braking_PWM+0x72>
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]
		if (TIM1->CCR4 > chanel_D) TIM1->CCR4 -= 1; else stop_braking ++;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <braking_PWM+0xd0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <braking_PWM+0xe0>)
 8001eac:	8812      	ldrh	r2, [r2, #0]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d905      	bls.n	8001ebe <braking_PWM+0x8a>
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <braking_PWM+0xd0>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <braking_PWM+0xd0>)
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	e002      	b.n	8001ec4 <braking_PWM+0x90>
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
		if (stop_braking == 4) { flag.braking = false; flag.time_of = true; LED_L_ON; LED_R_ON;}  // только еще включаем лампы
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d115      	bne.n	8001ef6 <braking_PWM+0xc2>
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <braking_PWM+0xcc>)
 8001ecc:	7893      	ldrb	r3, [r2, #2]
 8001ece:	f36f 03c3 	bfc	r3, #3, #1
 8001ed2:	7093      	strb	r3, [r2, #2]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <braking_PWM+0xcc>)
 8001ed6:	7813      	ldrb	r3, [r2, #0]
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	7013      	strb	r3, [r2, #0]
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <braking_PWM+0xe4>)
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <braking_PWM+0xe4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6113      	str	r3, [r2, #16]
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <braking_PWM+0xe4>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <braking_PWM+0xe4>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6113      	str	r3, [r2, #16]
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000080 	.word	0x20000080
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	20000084 	.word	0x20000084
 8001f0c:	20000086 	.word	0x20000086
 8001f10:	20000088 	.word	0x20000088
 8001f14:	2000008a 	.word	0x2000008a
 8001f18:	40010c00 	.word	0x40010c00

08001f1c <random_time>:

uint32_t random_time (uint32_t in_time){       // рандомное время
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	uint32_t mirror;                           // зеркало
	mirror = in_time % MAX_TIME;               // присваиваем число которое всегда будет в диапазоне от нуля до MAX_TIME
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <random_time+0x48>)
 8001f28:	fba2 1203 	umull	r1, r2, r2, r3
 8001f2c:	0b52      	lsrs	r2, r2, #13
 8001f2e:	f247 5130 	movw	r1, #30000	; 0x7530
 8001f32:	fb01 f202 	mul.w	r2, r1, r2
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
	if (mirror < MIN_TIME) mirror = MIN_TIME;  // но так как ноль нам не подходит то делаем минимум
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d802      	bhi.n	8001f4a <random_time+0x2e>
 8001f44:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f48:	60fb      	str	r3, [r7, #12]
	LED_ON;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <random_time+0x4c>)
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <random_time+0x4c>)
 8001f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f54:	6113      	str	r3, [r2, #16]
	return mirror;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	45e7b273 	.word	0x45e7b273
 8001f68:	40011000 	.word	0x40011000

08001f6c <stop_game>:

void stop_game(void) {                         // остановить игру
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	if (TIM1->CCR1 > 0 || TIM1->CCR2 > 0 || TIM1->CCR3 > 0 || TIM1->CCR4 > 0) {     // проверим шим у нас в нулях или не
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <stop_game+0xb4>)
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <stop_game+0x24>
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <stop_game+0xb4>)
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <stop_game+0x24>
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <stop_game+0xb4>)
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <stop_game+0x24>
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <stop_game+0xb4>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d011      	beq.n	8001fb4 <stop_game+0x48>
		chanel_A = 0;    // если нет, ставим коэф. заполнения 0
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <stop_game+0xb8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
		chanel_B = 0;
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <stop_game+0xbc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	801a      	strh	r2, [r3, #0]
		chanel_C = 0;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <stop_game+0xc0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
		chanel_D = 0;
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <stop_game+0xc4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	801a      	strh	r2, [r3, #0]
		flag.braking = true;     // поднимаем флаг торможения
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <stop_game+0xc8>)
 8001faa:	7893      	ldrb	r3, [r2, #2]
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	7093      	strb	r3, [r2, #2]
		return;                  // покидаем функцию
 8001fb2:	e034      	b.n	800201e <stop_game+0xb2>
	}
	if (flag.repleys_game) {     // тут мы потихоньку сбрасываем количество повторений
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <stop_game+0xc8>)
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d013      	beq.n	8001fea <stop_game+0x7e>
		flag.repleys_game -- ;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <stop_game+0xc8>)
 8001fc4:	785b      	ldrb	r3, [r3, #1]
 8001fc6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd2:	b2d9      	uxtb	r1, r3
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <stop_game+0xc8>)
 8001fd6:	7853      	ldrb	r3, [r2, #1]
 8001fd8:	f361 0305 	bfi	r3, r1, #0, #6
 8001fdc:	7053      	strb	r3, [r2, #1]
		game(SysTimer_ms);       // запуская новую игру
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <stop_game+0xcc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fa20 	bl	8002428 <game>
		return;
 8001fe8:	e019      	b.n	800201e <stop_game+0xb2>
	}
	flag.start_game = false;     // если уже нету повторений говорим что игра выкл
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <stop_game+0xc8>)
 8001fec:	7813      	ldrb	r3, [r2, #0]
 8001fee:	f36f 0300 	bfc	r3, #0, #1
 8001ff2:	7013      	strb	r3, [r2, #0]
	restart_value ();            // сбрасываем показания накопленных значений гиро
 8001ff4:	f000 f828 	bl	8002048 <restart_value>
	LED_OFF;                     // лампу на плате
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <stop_game+0xd0>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <stop_game+0xd0>)
 8001ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002002:	6113      	str	r3, [r2, #16]
	time_to_next_game = PAUSE_ON_GAME;  // и вводим ограничитель между играми чтоб можно было остановится
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <stop_game+0xd4>)
 8002006:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800200a:	801a      	strh	r2, [r3, #0]
	flag.provoke = true;         // и запускаем возможность провокаций
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <stop_game+0xc8>)
 800200e:	78d3      	ldrb	r3, [r2, #3]
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	70d3      	strb	r3, [r2, #3]
	provoke = PROVOKE;           // выставляем время между ними
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <stop_game+0xd8>)
 8002018:	f648 02b8 	movw	r2, #35000	; 0x88b8
 800201c:	801a      	strh	r2, [r3, #0]
}
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012c00 	.word	0x40012c00
 8002024:	20000084 	.word	0x20000084
 8002028:	20000086 	.word	0x20000086
 800202c:	20000088 	.word	0x20000088
 8002030:	2000008a 	.word	0x2000008a
 8002034:	20000080 	.word	0x20000080
 8002038:	20000030 	.word	0x20000030
 800203c:	40011000 	.word	0x40011000
 8002040:	20000042 	.word	0x20000042
 8002044:	20000044 	.word	0x20000044

08002048 <restart_value>:

void restart_value (void) {      // сброс данных
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
	sleep_gyrX = 0;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <restart_value+0x24>)
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
	sleep_gyrY = 0;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <restart_value+0x28>)
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
	sleep_gyrZ = 0;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <restart_value+0x2c>)
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000074 	.word	0x20000074
 8002070:	20000078 	.word	0x20000078
 8002074:	2000007c 	.word	0x2000007c

08002078 <check_new_game>:

void check_new_game(void) {      // проверка не нужно ли начать новую игру
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	if (!flag.start_game && !flag.repleys_game && !time_to_next_game) {    // если у нас не игра, если количество реплеев 0, и если выдержали паузу между играми
 800207c:	4b86      	ldr	r3, [pc, #536]	; (8002298 <check_new_game+0x220>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8104 	bne.w	8002294 <check_new_game+0x21c>
 800208c:	4b82      	ldr	r3, [pc, #520]	; (8002298 <check_new_game+0x220>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80fc 	bne.w	8002294 <check_new_game+0x21c>
 800209c:	4b7f      	ldr	r3, [pc, #508]	; (800229c <check_new_game+0x224>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 80f7 	bne.w	8002294 <check_new_game+0x21c>
		sleep_gyrX += gyrX_f;             // потихоньку увеличиваем переменную хранения гиро
 80020a6:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <check_new_game+0x228>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <check_new_game+0x22c>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa97 	bl	80005e4 <__addsf3>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b79      	ldr	r3, [pc, #484]	; (80022a0 <check_new_game+0x228>)
 80020bc:	601a      	str	r2, [r3, #0]
		sleep_gyrY += gyrY_f;
 80020be:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <check_new_game+0x230>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <check_new_game+0x234>)
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa8b 	bl	80005e4 <__addsf3>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <check_new_game+0x230>)
 80020d4:	601a      	str	r2, [r3, #0]
		sleep_gyrZ += gyrZ_f;
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <check_new_game+0x238>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a76      	ldr	r2, [pc, #472]	; (80022b4 <check_new_game+0x23c>)
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa7f 	bl	80005e4 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <check_new_game+0x238>)
 80020ec:	601a      	str	r2, [r3, #0]
		if (sleep_gyrX >= MAX_VALUE || sleep_gyrY >= MAX_VALUE || sleep_gyrZ >= MAX_VALUE) {  // если по какой то из осей есть движение
 80020ee:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <check_new_game+0x228>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4971      	ldr	r1, [pc, #452]	; (80022b8 <check_new_game+0x240>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fd2f 	bl	8000b58 <__aeabi_fcmpge>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d111      	bne.n	8002124 <check_new_game+0xac>
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <check_new_game+0x230>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	496c      	ldr	r1, [pc, #432]	; (80022b8 <check_new_game+0x240>)
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fd26 	bl	8000b58 <__aeabi_fcmpge>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <check_new_game+0xac>
 8002112:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <check_new_game+0x238>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4968      	ldr	r1, [pc, #416]	; (80022b8 <check_new_game+0x240>)
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fd1d 	bl	8000b58 <__aeabi_fcmpge>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01f      	beq.n	8002164 <check_new_game+0xec>
			flag.start_game = true;                         // поднимаем флаг
 8002124:	4a5c      	ldr	r2, [pc, #368]	; (8002298 <check_new_game+0x220>)
 8002126:	7813      	ldrb	r3, [r2, #0]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	7013      	strb	r3, [r2, #0]
			game(SysTimer_ms);                              // запускаем игру
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <check_new_game+0x244>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f978 	bl	8002428 <game>
			flag.repleys_game = SysTimer_ms % MAX_REPLEY;   // и выбираем количество повторов
 8002138:	4b60      	ldr	r3, [pc, #384]	; (80022bc <check_new_game+0x244>)
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <check_new_game+0x248>)
 800213e:	fba3 2301 	umull	r2, r3, r3, r1
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	1aca      	subs	r2, r1, r3
 800214e:	4613      	mov	r3, r2
 8002150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	4a50      	ldr	r2, [pc, #320]	; (8002298 <check_new_game+0x220>)
 8002158:	7853      	ldrb	r3, [r2, #1]
 800215a:	f361 0305 	bfi	r3, r1, #0, #6
 800215e:	7053      	strb	r3, [r2, #1]
			restart_value ();                               // и сбросим переменные, чтоб их использовать в движении
 8002160:	f7ff ff72 	bl	8002048 <restart_value>
		}
		if (sleep_gyrX <= RMAX_VALUE || sleep_gyrY <= RMAX_VALUE || sleep_gyrZ <= RMAX_VALUE) {  // тоже самое если показания в минус
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <check_new_game+0x228>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4956      	ldr	r1, [pc, #344]	; (80022c4 <check_new_game+0x24c>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fcea 	bl	8000b44 <__aeabi_fcmple>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d111      	bne.n	800219a <check_new_game+0x122>
 8002176:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <check_new_game+0x230>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4952      	ldr	r1, [pc, #328]	; (80022c4 <check_new_game+0x24c>)
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fce1 	bl	8000b44 <__aeabi_fcmple>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <check_new_game+0x122>
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <check_new_game+0x238>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	494d      	ldr	r1, [pc, #308]	; (80022c4 <check_new_game+0x24c>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fcd8 	bl	8000b44 <__aeabi_fcmple>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01f      	beq.n	80021da <check_new_game+0x162>
			flag.start_game = true;
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <check_new_game+0x220>)
 800219c:	7813      	ldrb	r3, [r2, #0]
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	7013      	strb	r3, [r2, #0]
			game(SysTimer_ms);
 80021a4:	4b45      	ldr	r3, [pc, #276]	; (80022bc <check_new_game+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f93d 	bl	8002428 <game>
			flag.repleys_game = SysTimer_ms % MAX_REPLEY;
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <check_new_game+0x244>)
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <check_new_game+0x248>)
 80021b4:	fba3 2301 	umull	r2, r3, r3, r1
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	1aca      	subs	r2, r1, r3
 80021c4:	4613      	mov	r3, r2
 80021c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ca:	b2d9      	uxtb	r1, r3
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <check_new_game+0x220>)
 80021ce:	7853      	ldrb	r3, [r2, #1]
 80021d0:	f361 0305 	bfi	r3, r1, #0, #6
 80021d4:	7053      	strb	r3, [r2, #1]
			restart_value ();
 80021d6:	f7ff ff37 	bl	8002048 <restart_value>
		}
		if (sleep_gyrX > 0) sleep_gyrX -= REVERS_COUNT; else sleep_gyrX += REVERS_COUNT;       // и паралельно сбросим показания
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <check_new_game+0x228>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fcc2 	bl	8000b6c <__aeabi_fcmpgt>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <check_new_game+0x18c>
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <check_new_game+0x228>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4935      	ldr	r1, [pc, #212]	; (80022c8 <check_new_game+0x250>)
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9f3 	bl	80005e0 <__aeabi_fsub>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <check_new_game+0x228>)
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e009      	b.n	8002218 <check_new_game+0x1a0>
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <check_new_game+0x228>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	492f      	ldr	r1, [pc, #188]	; (80022c8 <check_new_game+0x250>)
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9ea 	bl	80005e4 <__addsf3>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <check_new_game+0x228>)
 8002216:	601a      	str	r2, [r3, #0]
		if (sleep_gyrY > 0) sleep_gyrY -= REVERS_COUNT; else sleep_gyrY += REVERS_COUNT;
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <check_new_game+0x230>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fca3 	bl	8000b6c <__aeabi_fcmpgt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <check_new_game+0x1ca>
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <check_new_game+0x230>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4925      	ldr	r1, [pc, #148]	; (80022c8 <check_new_game+0x250>)
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f9d4 	bl	80005e0 <__aeabi_fsub>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <check_new_game+0x230>)
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e009      	b.n	8002256 <check_new_game+0x1de>
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <check_new_game+0x230>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4920      	ldr	r1, [pc, #128]	; (80022c8 <check_new_game+0x250>)
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f9cb 	bl	80005e4 <__addsf3>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <check_new_game+0x230>)
 8002254:	601a      	str	r2, [r3, #0]
		if (sleep_gyrZ > 0) sleep_gyrZ -= REVERS_COUNT; else sleep_gyrZ += REVERS_COUNT;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <check_new_game+0x238>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fc84 	bl	8000b6c <__aeabi_fcmpgt>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <check_new_game+0x208>
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <check_new_game+0x238>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4916      	ldr	r1, [pc, #88]	; (80022c8 <check_new_game+0x250>)
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f9b5 	bl	80005e0 <__aeabi_fsub>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <check_new_game+0x238>)
 800227c:	601a      	str	r2, [r3, #0]
	}
}
 800227e:	e009      	b.n	8002294 <check_new_game+0x21c>
		if (sleep_gyrZ > 0) sleep_gyrZ -= REVERS_COUNT; else sleep_gyrZ += REVERS_COUNT;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <check_new_game+0x238>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4910      	ldr	r1, [pc, #64]	; (80022c8 <check_new_game+0x250>)
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f9ac 	bl	80005e4 <__addsf3>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <check_new_game+0x238>)
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000080 	.word	0x20000080
 800229c:	20000042 	.word	0x20000042
 80022a0:	20000074 	.word	0x20000074
 80022a4:	20000054 	.word	0x20000054
 80022a8:	20000078 	.word	0x20000078
 80022ac:	20000058 	.word	0x20000058
 80022b0:	2000007c 	.word	0x2000007c
 80022b4:	2000005c 	.word	0x2000005c
 80022b8:	43fa0000 	.word	0x43fa0000
 80022bc:	20000030 	.word	0x20000030
 80022c0:	aaaaaaab 	.word	0xaaaaaaab
 80022c4:	c3fa0000 	.word	0xc3fa0000
 80022c8:	42200000 	.word	0x42200000
 80022cc:	00000000 	.word	0x00000000

080022d0 <check_let>:

void check_let (void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	if (flag.start_game) {
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <check_let+0xd0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d052      	beq.n	8002388 <check_let+0xb8>
		if (accX_f > MIN_ACC || accX_f < MIN_ACC_M || accY_f > MIN_ACC || accY_f < MIN_ACC_M || accZ_f > MIN_ACC || accZ_f < MIN_ACC_M) {
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <check_let+0xd4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f896 	bl	8000418 <__aeabi_f2d>
 80022ec:	a328      	add	r3, pc, #160	; (adr r3, 8002390 <check_let+0xc0>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f967 	bl	80005c4 <__aeabi_dcmpgt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d144      	bne.n	8002386 <check_let+0xb6>
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <check_let+0xd4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f889 	bl	8000418 <__aeabi_f2d>
 8002306:	a324      	add	r3, pc, #144	; (adr r3, 8002398 <check_let+0xc8>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe f93c 	bl	8000588 <__aeabi_dcmplt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d137      	bne.n	8002386 <check_let+0xb6>
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <check_let+0xd8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f87c 	bl	8000418 <__aeabi_f2d>
 8002320:	a31b      	add	r3, pc, #108	; (adr r3, 8002390 <check_let+0xc0>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f94d 	bl	80005c4 <__aeabi_dcmpgt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d12a      	bne.n	8002386 <check_let+0xb6>
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <check_let+0xd8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f86f 	bl	8000418 <__aeabi_f2d>
 800233a:	a317      	add	r3, pc, #92	; (adr r3, 8002398 <check_let+0xc8>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f922 	bl	8000588 <__aeabi_dcmplt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11d      	bne.n	8002386 <check_let+0xb6>
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <check_let+0xdc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f862 	bl	8000418 <__aeabi_f2d>
 8002354:	a30e      	add	r3, pc, #56	; (adr r3, 8002390 <check_let+0xc0>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe f933 	bl	80005c4 <__aeabi_dcmpgt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d110      	bne.n	8002386 <check_let+0xb6>
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <check_let+0xdc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f855 	bl	8000418 <__aeabi_f2d>
 800236e:	a30a      	add	r3, pc, #40	; (adr r3, 8002398 <check_let+0xc8>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f908 	bl	8000588 <__aeabi_dcmplt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <check_let+0xb6>
			return;
		}
		time_game = 5;
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <check_let+0xe0>)
 8002380:	2205      	movs	r2, #5
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e000      	b.n	8002388 <check_let+0xb8>
			return;
 8002386:	bf00      	nop
		/*if ((gyrX_f + gyrY_f + gyrZ_f) >  MAX_ROUND) {
			time_game = 5;
		}*/
	}
}
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	f3af 8000 	nop.w
 8002390:	9999999a 	.word	0x9999999a
 8002394:	3ff19999 	.word	0x3ff19999
 8002398:	9999999a 	.word	0x9999999a
 800239c:	bff19999 	.word	0xbff19999
 80023a0:	20000080 	.word	0x20000080
 80023a4:	20000048 	.word	0x20000048
 80023a8:	2000004c 	.word	0x2000004c
 80023ac:	20000050 	.word	0x20000050
 80023b0:	2000003c 	.word	0x2000003c

080023b4 <start>:

void start (void) {    // моргание при старте
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	LED_L_ON;
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <start+0x70>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <start+0x70>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 80023c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c8:	f7ff f8bc 	bl	8001544 <Delay_ms>
	LED_R_ON;
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <start+0x70>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <start+0x70>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 80023d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023dc:	f7ff f8b2 	bl	8001544 <Delay_ms>
	LED_L_OFF;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <start+0x70>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <start+0x70>)
 80023e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ea:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 80023ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f0:	f7ff f8a8 	bl	8001544 <Delay_ms>
	LED_R_OFF;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <start+0x70>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <start+0x70>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6113      	str	r3, [r2, #16]
	Delay_ms (1000);
 8002400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002404:	f7ff f89e 	bl	8001544 <Delay_ms>
	LED_L_ON; LED_R_ON;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <start+0x70>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <start+0x70>)
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	6113      	str	r3, [r2, #16]
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <start+0x70>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a02      	ldr	r2, [pc, #8]	; (8002424 <start+0x70>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6113      	str	r3, [r2, #16]
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40010c00 	.word	0x40010c00

08002428 <game>:

void game(uint32_t game) {              // игра
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	flag.provoke = false;               // запретим провокацию
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <game+0x150>)
 8002432:	78d3      	ldrb	r3, [r2, #3]
 8002434:	f36f 0341 	bfc	r3, #1, #1
 8002438:	70d3      	strb	r3, [r2, #3]
	uint32_t mirror = game % MAX_PWM;   // промежуточная переменная для constrain
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <game+0x154>)
 800243e:	fba2 1203 	umull	r1, r2, r2, r3
 8002442:	0992      	lsrs	r2, r2, #6
 8002444:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002448:	fb01 f202 	mul.w	r2, r1, r2
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
	switch (game % 4) {                 // +1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	f200 808a 	bhi.w	8002570 <game+0x148>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <game+0x3c>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	080024bd 	.word	0x080024bd
 800246c:	08002505 	.word	0x08002505
 8002470:	0800253b 	.word	0x0800253b
	case 0:
		set_PWM (constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM),0);  // установим шим под каждый вариант игры
 8002474:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002478:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f8f3 	bl	8002668 <constrain>
 8002482:	4603      	mov	r3, r0
 8002484:	b29c      	uxth	r4, r3
 8002486:	f44f 7216 	mov.w	r2, #600	; 0x258
 800248a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8ea 	bl	8002668 <constrain>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4620      	mov	r0, r4
 800249e:	f000 f873 	bl	8002588 <set_PWM>
		time_game = random_time(game);  // время игры
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fd3a 	bl	8001f1c <random_time>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4a35      	ldr	r2, [pc, #212]	; (8002580 <game+0x158>)
 80024ac:	6013      	str	r3, [r2, #0]
		LED_L_OFF;                      // светик рандомный
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <game+0x15c>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	4a34      	ldr	r2, [pc, #208]	; (8002584 <game+0x15c>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6113      	str	r3, [r2, #16]
		break;
 80024ba:	e059      	b.n	8002570 <game+0x148>
	case 1:
		set_PWM (0,constrain (mirror, MIN_PWM, MAX_PWM),0,constrain (mirror, MIN_PWM, MAX_PWM));
 80024bc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f8cf 	bl	8002668 <constrain>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b29c      	uxth	r4, r3
 80024ce:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f8c6 	bl	8002668 <constrain>
 80024dc:	4603      	mov	r3, r0
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	4621      	mov	r1, r4
 80024e4:	2000      	movs	r0, #0
 80024e6:	f000 f84f 	bl	8002588 <set_PWM>
		time_game = random_time(game);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fd16 	bl	8001f1c <random_time>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4a23      	ldr	r2, [pc, #140]	; (8002580 <game+0x158>)
 80024f4:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <game+0x15c>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <game+0x15c>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6113      	str	r3, [r2, #16]
		break;
 8002502:	e035      	b.n	8002570 <game+0x148>
	case 2:
		set_PWM (0,constrain (mirror, MIN_PWM, MAX_PWM),0,0);
 8002504:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002508:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8ab 	bl	8002668 <constrain>
 8002512:	4603      	mov	r3, r0
 8002514:	b299      	uxth	r1, r3
 8002516:	2300      	movs	r3, #0
 8002518:	2200      	movs	r2, #0
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f834 	bl	8002588 <set_PWM>
		time_game = random_time(game);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fcfb 	bl	8001f1c <random_time>
 8002526:	4603      	mov	r3, r0
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <game+0x158>)
 800252a:	6013      	str	r3, [r2, #0]
		LED_R_OFF;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <game+0x15c>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <game+0x15c>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6113      	str	r3, [r2, #16]
		break;
 8002538:	e01a      	b.n	8002570 <game+0x148>
	case 3:
		set_PWM (0,0,constrain (mirror, MIN_PWM, MAX_PWM),0);
 800253a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800253e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f890 	bl	8002668 <constrain>
 8002548:	4603      	mov	r3, r0
 800254a:	b29a      	uxth	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	2100      	movs	r1, #0
 8002550:	2000      	movs	r0, #0
 8002552:	f000 f819 	bl	8002588 <set_PWM>
		time_game = random_time(game);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fce0 	bl	8001f1c <random_time>
 800255c:	4603      	mov	r3, r0
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <game+0x158>)
 8002560:	6013      	str	r3, [r2, #0]
		LED_L_OFF;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <game+0x15c>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <game+0x15c>)
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	6113      	str	r3, [r2, #16]
		break;
 800256e:	bf00      	nop
	}
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}
 8002578:	20000080 	.word	0x20000080
 800257c:	1b4e81b5 	.word	0x1b4e81b5
 8002580:	2000003c 	.word	0x2000003c
 8002584:	40010c00 	.word	0x40010c00

08002588 <set_PWM>:

void set_PWM (uint16_t ch_A, uint16_t ch_B, uint16_t ch_C, uint16_t ch_D) {
 8002588:	b490      	push	{r4, r7}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4604      	mov	r4, r0
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	80fb      	strh	r3, [r7, #6]
 800259a:	4603      	mov	r3, r0
 800259c:	80bb      	strh	r3, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]
 80025a2:	4613      	mov	r3, r2
 80025a4:	803b      	strh	r3, [r7, #0]
	chanel_A = ch_A;    // перенесем коэф
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <set_PWM+0x4c>)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	8013      	strh	r3, [r2, #0]
	chanel_B = ch_B;
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <set_PWM+0x50>)
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	8013      	strh	r3, [r2, #0]
	chanel_C = ch_C;
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <set_PWM+0x54>)
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	8013      	strh	r3, [r2, #0]
	chanel_D = ch_D;
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <set_PWM+0x58>)
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	8013      	strh	r3, [r2, #0]
	flag.overlocking = true;
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <set_PWM+0x5c>)
 80025c0:	7893      	ldrb	r3, [r2, #2]
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	7093      	strb	r3, [r2, #2]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc90      	pop	{r4, r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000084 	.word	0x20000084
 80025d8:	20000086 	.word	0x20000086
 80025dc:	20000088 	.word	0x20000088
 80025e0:	2000008a 	.word	0x2000008a
 80025e4:	20000080 	.word	0x20000080

080025e8 <init_flag>:

void init_flag (void) {          // инициализируем флаги при старте
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
	flag.start_game = false;
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <init_flag+0x7c>)
 80025ee:	7813      	ldrb	r3, [r2, #0]
 80025f0:	f36f 0300 	bfc	r3, #0, #1
 80025f4:	7013      	strb	r3, [r2, #0]
	flag.time_of = 0;
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <init_flag+0x7c>)
 80025f8:	7813      	ldrb	r3, [r2, #0]
 80025fa:	f36f 0341 	bfc	r3, #1, #1
 80025fe:	7013      	strb	r3, [r2, #0]
	flag.start_polling = 0;
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <init_flag+0x7c>)
 8002602:	7813      	ldrb	r3, [r2, #0]
 8002604:	f36f 0387 	bfc	r3, #2, #6
 8002608:	7013      	strb	r3, [r2, #0]
	flag.repleys_game = 0;
 800260a:	4a16      	ldr	r2, [pc, #88]	; (8002664 <init_flag+0x7c>)
 800260c:	7853      	ldrb	r3, [r2, #1]
 800260e:	f36f 0305 	bfc	r3, #0, #6
 8002612:	7053      	strb	r3, [r2, #1]
	flag.repleys_buzer = 0;
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <init_flag+0x7c>)
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	f36f 3391 	bfc	r3, #14, #4
 800261c:	6013      	str	r3, [r2, #0]
	flag.overlocking = false;
 800261e:	4a11      	ldr	r2, [pc, #68]	; (8002664 <init_flag+0x7c>)
 8002620:	7893      	ldrb	r3, [r2, #2]
 8002622:	f36f 0382 	bfc	r3, #2, #1
 8002626:	7093      	strb	r3, [r2, #2]
	flag.braking = false;
 8002628:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <init_flag+0x7c>)
 800262a:	7893      	ldrb	r3, [r2, #2]
 800262c:	f36f 03c3 	bfc	r3, #3, #1
 8002630:	7093      	strb	r3, [r2, #2]
	flag.change_PWM = false;
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <init_flag+0x7c>)
 8002634:	7893      	ldrb	r3, [r2, #2]
 8002636:	f36f 1304 	bfc	r3, #4, #1
 800263a:	7093      	strb	r3, [r2, #2]
	flag.start_polling = 0;
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <init_flag+0x7c>)
 800263e:	7813      	ldrb	r3, [r2, #0]
 8002640:	f36f 0387 	bfc	r3, #2, #6
 8002644:	7013      	strb	r3, [r2, #0]
	flag.provoke = false;
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <init_flag+0x7c>)
 8002648:	78d3      	ldrb	r3, [r2, #3]
 800264a:	f36f 0341 	bfc	r3, #1, #1
 800264e:	70d3      	strb	r3, [r2, #3]
	flag.mov_provoke = false;
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <init_flag+0x7c>)
 8002652:	78d3      	ldrb	r3, [r2, #3]
 8002654:	f36f 0382 	bfc	r3, #2, #1
 8002658:	70d3      	strb	r3, [r2, #3]
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000080 	.word	0x20000080

08002668 <constrain>:

uint32_t constrain (uint32_t Value, uint32_t Min, uint32_t Max){
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  return (Value < Min)? Min : (Value > Max)? Max : Value;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d305      	bcc.n	8002688 <constrain+0x20>
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4293      	cmp	r3, r2
 8002682:	bf28      	it	cs
 8002684:	4613      	movcs	r3, r2
 8002686:	e000      	b.n	800268a <constrain+0x22>
 8002688:	68bb      	ldr	r3, [r7, #8]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	; (80026d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	; (80026e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026c6:	f7ff ffe5 	bl	8002694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f000 f80f 	bl	80026ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ce:	f7ff faa5 	bl	8001c1c <main>
  bx lr
 80026d2:	4770      	bx	lr
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80026dc:	08002754 	.word	0x08002754
  ldr r2, =_sbss
 80026e0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80026e4:	2000008c 	.word	0x2000008c

080026e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC1_2_IRQHandler>
	...

080026ec <__libc_init_array>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	2600      	movs	r6, #0
 80026f0:	4d0c      	ldr	r5, [pc, #48]	; (8002724 <__libc_init_array+0x38>)
 80026f2:	4c0d      	ldr	r4, [pc, #52]	; (8002728 <__libc_init_array+0x3c>)
 80026f4:	1b64      	subs	r4, r4, r5
 80026f6:	10a4      	asrs	r4, r4, #2
 80026f8:	42a6      	cmp	r6, r4
 80026fa:	d109      	bne.n	8002710 <__libc_init_array+0x24>
 80026fc:	f000 f81a 	bl	8002734 <_init>
 8002700:	2600      	movs	r6, #0
 8002702:	4d0a      	ldr	r5, [pc, #40]	; (800272c <__libc_init_array+0x40>)
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <__libc_init_array+0x44>)
 8002706:	1b64      	subs	r4, r4, r5
 8002708:	10a4      	asrs	r4, r4, #2
 800270a:	42a6      	cmp	r6, r4
 800270c:	d105      	bne.n	800271a <__libc_init_array+0x2e>
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	f855 3b04 	ldr.w	r3, [r5], #4
 8002714:	4798      	blx	r3
 8002716:	3601      	adds	r6, #1
 8002718:	e7ee      	b.n	80026f8 <__libc_init_array+0xc>
 800271a:	f855 3b04 	ldr.w	r3, [r5], #4
 800271e:	4798      	blx	r3
 8002720:	3601      	adds	r6, #1
 8002722:	e7f2      	b.n	800270a <__libc_init_array+0x1e>
 8002724:	0800274c 	.word	0x0800274c
 8002728:	0800274c 	.word	0x0800274c
 800272c:	0800274c 	.word	0x0800274c
 8002730:	08002750 	.word	0x08002750

08002734 <_init>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr

08002740 <_fini>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr
